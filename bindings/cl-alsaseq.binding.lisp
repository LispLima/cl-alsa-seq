;;; Generated by Verrazano 0.5
;;; WARNING: This is a generated file, editing it is unwise!


(cl:in-package :cl-user)

(cl:defpackage :cl-alsaseq.binding
  (:use :cffi)
  (:nicknames)
  (:export "-NEW"
           "-CONSTRUCTOR"
           "-OPERATOR-="
           "SND-SEQ-REAL-TIME-NEW"
           "SND-SEQ-REAL-TIME-CONSTRUCTOR"
           "SND-SEQ-REAL-TIME-OPERATOR-="
           "POLLFD-NEW"
           "POLLFD-CONSTRUCTOR"
           "POLLFD-OPERATOR-="
           "SND-SEQ-EV-RAW-8-NEW"
           "SND-SEQ-EV-RAW-8-CONSTRUCTOR"
           "SND-SEQ-EV-RAW-8-OPERATOR-="
           "SND-SEQ-EV-EXT-NEW"
           "SND-SEQ-EV-EXT-CONSTRUCTOR"
           "SND-SEQ-EV-EXT-OPERATOR-="
           "SND-SEQ-RESULT-NEW"
           "SND-SEQ-RESULT-CONSTRUCTOR"
           "SND-SEQ-RESULT-OPERATOR-="
           "SND-SEQ-TIMESTAMP-NEW"
           "SND-SEQ-TIMESTAMP-CONSTRUCTOR"
           "SND-SEQ-TIMESTAMP-OPERATOR-="
           "SND-SEQ-EV-QUEUE-CONTROL-NEW"
           "SND-SEQ-EV-QUEUE-CONTROL-CONSTRUCTOR"
           "SND-SEQ-EV-QUEUE-CONTROL-OPERATOR-="
           "SND-SEQ-EV-RAW-32-NEW"
           "SND-SEQ-EV-RAW-32-CONSTRUCTOR"
           "SND-SEQ-EV-RAW-32-OPERATOR-="
           "SND-SEQ-CONNECT-NEW"
           "SND-SEQ-CONNECT-CONSTRUCTOR"
           "SND-SEQ-CONNECT-OPERATOR-="
           "SND-SEQ-QUEUE-SKEW-NEW"
           "SND-SEQ-QUEUE-SKEW-CONSTRUCTOR"
           "SND-SEQ-QUEUE-SKEW-OPERATOR-="
           "SND-SEQ-EV-CTRL-NEW"
           "SND-SEQ-EV-CTRL-CONSTRUCTOR"
           "SND-SEQ-EV-CTRL-OPERATOR-="
           "SND-SEQ-ADDR-NEW"
           "SND-SEQ-ADDR-CONSTRUCTOR"
           "SND-SEQ-ADDR-OPERATOR-="
           "SND-DEVNAME-NEW"
           "SND-DEVNAME-CONSTRUCTOR"
           "SND-DEVNAME-OPERATOR-="
           "SND-SEQ-EVENT-NEW"
           "SND-SEQ-EVENT-CONSTRUCTOR"
           "SND-SEQ-EVENT-OPERATOR-="
           "SND-SEQ-EV-NOTE-NEW"
           "SND-SEQ-EV-NOTE-CONSTRUCTOR"
           "SND-SEQ-EV-NOTE-OPERATOR-="
           "SND-CONFIG-ADD"
           "SND-SEQ-REAL-TIME-T"
           "SND-CONFIG-LOAD-OVERRIDE"
           "SND-SEQ-EV-EXT-T"
           "SND-SEQ-EV-RAW-32-T"
           "FGETC"
           "VSCANF"
           "SND-CONFIG-ITERATOR-ENTRY"
           "FGETPOS-64"
           "FLOCKFILE"
           "SND-INPUT-CLOSE"
           "FFLUSH-UNLOCKED"
           "SND-CONFIG-IMAKE-POINTER"
           "REWIND"
           "OFF-64-T"
           "SND-CONFIG-SET-STRING"
           "SND-CONFIG-MAKE"
           "OPEN-MEMSTREAM"
           "SND-SEQ-QUEUE-SKEW-T"
           "SND-CONFIG-MAKE-STRING"
           "SETLINEBUF"
           "FPUTS-UNLOCKED"
           "FEOF-UNLOCKED"
           "FERROR-UNLOCKED"
           "SND-CONFIG-MAKE-REAL"
           "SND-NAMES-LIST-FREE"
           "SND-CONFIG-MAKE-POINTER"
           "SND-CONFIG-TEST-ID"
           "SND-CONFIG-IMAKE-INTEGER"
           "STDOUT"
           "SND-CONFIG-SET-POINTER"
           "SND-CONFIG-ITERATOR-NEXT"
           "FEOF"
           "FOPEN"
           "SND-CONFIG-UPDATE-FREE"
           "PUTW"
           "PUTS"
           "SND-OUTPUT-CLOSE"
           "SND-CONFIG-TOP"
           "PUTC"
           "SND-SEQ-RESULT-T"
           "SND-INPUT-TYPE-T"
           "SND-INPUT-BUFFER"
           "SND-INPUT-STDIO"
           "SND-CONFIG-GET-CTL-IFACE"
           "SETBUF"
           "TMPNAM-R"
           "SND-CONFIG-GET-IREAL"
           "GETLINE"
           "FOPENCOOKIE"
           "CLOSE"
           "SEEK"
           "WRITE"
           "READ"
           "SND-CONFIG-MAKE-INTEGER"
           "SND-NAMES-LIST"
           "SND-CONFIG-GET-INTEGER-64"
           "SND-CONFIG-SET-INTEGER"
           "SND-INPUT-SCANF"
           "UNGETC"
           "FWRITE"
           "SSCANF"
           "SND-OUTPUT-STDIO-OPEN"
           "SND-INPUT-STDIO-OPEN"
           "SND-CONFIG-IMAKE-STRING"
           "SND-CONFIG-SET-ID"
           "FCLOSE"
           "SND-CONFIG-IMAKE-REAL"
           "PCLOSE"
           "SND-CONFIG-UPDATE"
           "SND-CONFIG-IMAKE-INTEGER-64"
           "SND-SEQ-EV-RAW-8-T"
           "SND-SEQ-EV-RAW-8"
           "SND-INPUT-GETS"
           "FTELL"
           "GETC-UNLOCKED"
           "SND-OUTPUT-BUFFER-STRING"
           "PTR"
           "LEN"
           "SND-SEQ-EV-EXT"
           "FPUTS"
           "FPUTC"
           "SND-CONFIG-GET-STRING"
           "FREOPEN"
           "FPUTC-UNLOCKED"
           "CTERMID"
           "RESULT"
           "EVENT"
           "SND-SEQ-RESULT"
           "SND-CONFIG-ITERATOR-FIRST"
           "CLEARERR-UNLOCKED"
           "SND-OUTPUT-FLUSH"
           "FSETPOS-64"
           "SND-CONFIG-EXPAND"
           "SND-CONFIG-GET-ID"
           "GETDELIM"
           "RENAME"
           "SETBUFFER"
           "SND-OUTPUT-PRINTF"
           "FSETPOS"
           "SND-SEQ-EV-QUEUE-CONTROL-T"
           "SND-SEQ-EV-QUEUE-CONTROL"
           "SCANF"
           "VFSCANF"
           "FERROR"
           "FILENO"
           "D"
           "SND-SEQ-EV-RAW-32"
           "SND-SEQ-EV-NOTE-T"
           "SND-OUTPUT-BUFFER-OPEN"
           "PERROR"
           "FSCANF"
           "SND-CONFIG-SEARCHV"
           "SND-OUTPUT-STDIO-ATTACH"
           "TEMPNAM"
           "SND-CONFIG"
           "SND-INPUT-GETC"
           "SND-SEQ-CONNECT-T"
           "SENDER"
           "SND-SEQ-CONNECT"
           "SND-CONFIG-DELETE-COMPOUND-MEMBERS"
           "CUSERID"
           "TMPNAM"
           "PUTCHAR-UNLOCKED"
           "STDIN"
           "SND-CONFIG-GET-BOOL"
           "FPOS-64-T"
           "SND-CONFIG-SAVE"
           "SND-CONFIG-LOAD"
           "FGETPOS"
           "FPOS-T"
           "SND-OUTPUT-TYPE-T"
           "SND-CONFIG-SET-INTEGER-64"
           "FILENO-UNLOCKED"
           "SND-INPUT-STDIO-ATTACH"
           "FTRYLOCKFILE"
           "SND-OUTPUT-BUFFER"
           "SND-OUTPUT-STDIO"
           "FREOPEN-64"
           "FDOPEN"
           "SND-CONFIG-DELETE"
           "SND-CONFIG-GET-REAL"
           "SND-INPUT-BUFFER-OPEN"
           "SSIZE-T"
           "SND-CONFIG-ITERATOR-END"
           "SND-CONFIG-ITERATOR-T"
           "SND-SEQ-EVENT-NONE"
           "SND-SEQ-EVENT-USR-VAR-4"
           "SND-SEQ-EVENT-USR-VAR-3"
           "SND-SEQ-EVENT-USR-VAR-2"
           "SND-SEQ-EVENT-USR-VAR-1"
           "SND-SEQ-EVENT-USR-VAR-0"
           "SND-SEQ-EVENT-BOUNCE"
           "SND-SEQ-EVENT-SYSEX"
           "SND-SEQ-EVENT-USR-9"
           "SND-SEQ-EVENT-USR-8"
           "SND-SEQ-EVENT-USR-7"
           "SND-SEQ-EVENT-USR-6"
           "SND-SEQ-EVENT-USR-5"
           "SND-SEQ-EVENT-USR-4"
           "SND-SEQ-EVENT-USR-3"
           "SND-SEQ-EVENT-USR-2"
           "SND-SEQ-EVENT-USR-1"
           "SND-SEQ-EVENT-USR-0"
           "SND-SEQ-EVENT-PORT-UNSUBSCRIBED"
           "SND-SEQ-EVENT-PORT-SUBSCRIBED"
           "SND-SEQ-EVENT-PORT-CHANGE"
           "SND-SEQ-EVENT-PORT-EXIT"
           "SND-SEQ-EVENT-PORT-START"
           "SND-SEQ-EVENT-CLIENT-CHANGE"
           "SND-SEQ-EVENT-CLIENT-EXIT"
           "SND-SEQ-EVENT-CLIENT-START"
           "SND-SEQ-EVENT-OSS"
           "SND-SEQ-EVENT-ECHO"
           "SND-SEQ-EVENT-SENSING"
           "SND-SEQ-EVENT-RESET"
           "SND-SEQ-EVENT-TUNE-REQUEST"
           "SND-SEQ-EVENT-SYNC-POS"
           "SND-SEQ-EVENT-QUEUE-SKEW"
           "SND-SEQ-EVENT-TICK"
           "SND-SEQ-EVENT-CLOCK"
           "SND-SEQ-EVENT-TEMPO"
           "SND-SEQ-EVENT-SETPOS-TIME"
           "SND-SEQ-EVENT-SETPOS-TICK"
           "SND-SEQ-EVENT-STOP"
           "SND-SEQ-EVENT-CONTINUE"
           "SND-SEQ-EVENT-START"
           "SND-SEQ-EVENT-KEYSIGN"
           "SND-SEQ-EVENT-TIMESIGN"
           "SND-SEQ-EVENT-QFRAME"
           "SND-SEQ-EVENT-SONGSEL"
           "SND-SEQ-EVENT-SONGPOS"
           "SND-SEQ-EVENT-REGPARAM"
           "SND-SEQ-EVENT-NONREGPARAM"
           "SND-SEQ-EVENT-CONTROL-14"
           "SND-SEQ-EVENT-PITCHBEND"
           "SND-SEQ-EVENT-CHANPRESS"
           "SND-SEQ-EVENT-PGMCHANGE"
           "SND-SEQ-EVENT-CONTROLLER"
           "SND-SEQ-EVENT-KEYPRESS"
           "SND-SEQ-EVENT-NOTEOFF"
           "SND-SEQ-EVENT-NOTEON"
           "SND-SEQ-EVENT-NOTE"
           "SND-SEQ-EVENT-RESULT"
           "SND-SEQ-EVENT-SYSTEM"
           "SND-SEQ-EVENT-TYPE"
           "BASE"
           "SND-SEQ-QUEUE-SKEW"
           "SND-SEQ-EV-CTRL-T"
           "VALUE"
           "PARAM"
           "UNUSED"
           "SND-SEQ-EV-CTRL"
           "SND-CONFIG-UPDATE-FREE-GLOBAL"
           "SND-CONFIG-EVALUATE"
           "GETCHAR-UNLOCKED"
           "FWRITE-UNLOCKED"
           "CLEARERR"
           "FSEEKO"
           "GETCHAR"
           "FSEEK"
           "TMPFILE-64"
           "PPOLL"
           "TIMESPEC"
           "SND-CONFIG-SEARCH-DEFINITION"
           "SND-CONFIG-GET-ASCII"
           "FUNLOCKFILE"
           "SND-CONFIG-MAKE-COMPOUND"
           "GETW"
           "GETC"
           "PUTCHAR"
           "FMEMOPEN"
           "SND-CONFIG-GET-POINTER"
           "FOPEN-64"
           "SND-OUTPUT-VPRINTF"
           "VA-LIST"
           "SETVBUF"
           "FCLOSEALL"
           "OFF-T"
           "NEXT"
           "COMMENT"
           "NAME"
           "SND-DEVNAME"
           "SND-DEVNAME-T"
           "FTELLO-64"
           "VSSCANF"
           "SND-CONFIG-COPY"
           "SND-INPUT-UNGETC"
           "SND-INPUT-T"
           "SND-CONFIG-SET-ASCII"
           "SND-CONFIG-UPDATE-R"
           "SND-CONFIG-UPDATE-T"
           "SND-SEQ-EVENT-T"
           "DATA"
           "DEST"
           "SOURCE"
           "QUEUE"
           "TAG"
           "FLAGS"
           "TYPE"
           "SND-SEQ-EVENT"
           "SND-SEQ-ADDR-T"
           "PORT"
           "CLIENT"
           "SND-SEQ-ADDR"
           "SND-SEQ-TIMESTAMP-T"
           "TIME"
           "TICK"
           "SND-SEQ-TIMESTAMP"
           "TV-NSEC"
           "TV-SEC"
           "SND-SEQ-REAL-TIME"
           "SND-SEQ-TICK-TIME-T"
           "SND-SEQ-EVENT-TYPE-T"
           "POLL"
           "NFDS-T"
           "REVENTS"
           "EVENTS"
           "FD"
           "POLLFD"
           "SND-OUTPUT-PUTS"
           "SND-OUTPUT-PUTC"
           "SND-OUTPUT-T"
           "PUTC-UNLOCKED"
           "FFLUSH"
           "OBSTACK"
           "SND-CONFIG-SET-REAL"
           "SND-CONFIG-GET-BOOL-ASCII"
           "STDERR"
           "DURATION"
           "OFF-VELOCITY"
           "VELOCITY"
           "NOTE"
           "CHANNEL"
           "SND-SEQ-EV-NOTE"
           "FTELLO"
           "RENAMEAT"
           "SND-CONFIG-GET-INTEGER"
           "FGETC-UNLOCKED"
           "SND-CONFIG-GET-CTL-IFACE-ASCII"
           "POPEN"
           "FSEEKO-64"
           "SND-CONFIG-MAKE-INTEGER-64"
           "SND-CONFIG-SEARCH"
           "REMOVE"
           "TMPFILE"
           "FILE"
           "SIZE-T"
           "SND-CONFIG-GET-TYPE"
           "SND-CONFIG-T"
           "SND-CONFIG-TYPE-T"
           "SND-CONFIG-TYPE-COMPOUND"
           "SND-CONFIG-TYPE-POINTER"
           "SND-CONFIG-TYPE-STRING"
           "SND-CONFIG-TYPE-REAL"
           "SND-CONFIG-TYPE-INTEGER-64"
           "SND-CONFIG-TYPE-INTEGER"))

(cl:in-package :cl-alsaseq.binding)

(cl:defun vtable-lookup (pobj indx coff)
  (cl:let ((vptr (cffi:mem-ref pobj :pointer coff)))
    (cffi:mem-aref vptr :pointer (cl:- indx 2))))

(cl:defmacro virtual-funcall (pobj indx coff cl:&body body)
  `(cffi:foreign-funcall-pointer (vtable-lookup ,pobj ,indx ,coff) cl:nil ,@body))

(cffi:defcenum _snd-config-type
  (:snd-config-type-integer 0)
  (:snd-config-type-integer-64 1)
  (:snd-config-type-real 2)
  (:snd-config-type-string 3)
  (:snd-config-type-pointer 4)
  (:snd-config-type-compound 1024))

(cffi::defctype snd-config-type-t _snd-config-type)

(cffi:defcstruct _snd-config
  )

(cffi::defctype snd-config-t (:pointer (:struct _snd-config)))

(cffi:defcfun ("snd_config_get_type" snd-config-get-type) snd-config-type-t (config :pointer))

(cffi:defcstruct _io-marker
  (_next :pointer)
  (_sbuf :pointer)
  (_pos :int))

(cffi::defctype _-off-t :long)

(cffi::defctype _io-lock-t :void)

(cffi::defctype _-quad-t :long-long)

(cffi::defctype _-off-64-t _-quad-t)

(cffi::defctype size-t :unsigned-int)

(cffi:defcstruct _io-file
  (_flags :int)
  (_io-read-ptr (:pointer :char))
  (_io-read-end (:pointer :char))
  (_io-read-base (:pointer :char))
  (_io-write-base (:pointer :char))
  (_io-write-ptr (:pointer :char))
  (_io-write-end (:pointer :char))
  (_io-buf-base (:pointer :char))
  (_io-buf-end (:pointer :char))
  (_io-save-base (:pointer :char))
  (_io-backup-base (:pointer :char))
  (_io-save-end (:pointer :char))
  (_markers :pointer)
  (_chain :pointer)
  (_fileno :int)
  (_flags-2 :int)
  (_old-offset _-off-t)
  (_cur-column :unsigned-short)
  (_vtable-offset :char)
  (_shortbuf :char :count 1)
  (_lock :pointer)
  (_offset _-off-64-t)
  (_-pad-1 (:pointer :void))
  (_-pad-2 (:pointer :void))
  (_-pad-3 (:pointer :void))
  (_-pad-4 (:pointer :void))
  (_-pad-5 size-t)
  (_mode :int)
  (_unused-2 :char :count 40))

(cffi::defctype file (:pointer (:struct _io-file)))

(cffi:defcfun ("tmpfile" tmpfile) :pointer)

(cffi:defcfun ("remove" remove) :int (_-filename :pointer))

(cffi:defcfun ("snd_config_search" snd-config-search) :int (config :pointer) (key :pointer)
                                                           (result :pointer))

(cffi:defcfun ("snd_config_make_integer64" snd-config-make-integer-64) :int (config :pointer)
                                                                            (key :pointer))

(cffi:defcfun ("fseeko64" fseeko-64) :int (_-stream :pointer) (_-off _-off-64-t) (_-whence :int))

(cffi:defcfun ("popen" popen) :pointer (_-command :pointer) (_-modes :pointer))

(cffi:defcfun ("snd_config_get_ctl_iface_ascii" snd-config-get-ctl-iface-ascii) :int
                                                                                     (ascii :pointer))

(cffi:defcfun ("fgetc_unlocked" fgetc-unlocked) :int (_-fp :pointer))

(cffi:defcfun ("snd_config_get_integer" snd-config-get-integer) :int (config :pointer)
                                                                     (value (:pointer :long)))

(cffi:defcfun ("renameat" renameat) :int (_-oldfd :int) (_-old :pointer) (_-newfd :int)
                                         (_-new :pointer))

(cffi:defcfun ("ftello" ftello) _-off-t (_-stream :pointer))

(cffi:defcstruct snd-seq-ev-note
  (channel :unsigned-char)
  (note :unsigned-char)
  (velocity :unsigned-char)
  (off-velocity :unsigned-char)
  (duration :unsigned-int))

(cffi:defcvar ("stderr" stderr) :pointer)

(cffi:defcfun ("snd_config_get_bool_ascii" snd-config-get-bool-ascii) :int (ascii :pointer))

(cffi:defcfun ("snd_config_set_real" snd-config-set-real) :int (config :pointer) (value :double))

(cffi:defcstruct obstack
  )

(cffi:defcfun ("fflush" fflush) :int (_-stream :pointer))

(cffi:defcfun ("putc_unlocked" putc-unlocked) :int (_-c :int) (_-stream :pointer))

(cffi:defcstruct _snd-output
  )

(cffi::defctype snd-output-t (:pointer (:struct _snd-output)))

(cffi:defcfun ("snd_output_putc" snd-output-putc) :int (output :pointer) (c :int))

(cffi:defcfun ("snd_output_puts" snd-output-puts) :int (output :pointer) (str :pointer))

(cffi:defcstruct pollfd
  (fd :int)
  (events :short)
  (revents :short))

(cffi::defctype nfds-t :unsigned-long)

(cffi:defcfun ("poll" poll) :int (_-fds :pointer) (_-nfds nfds-t) (_-timeout :int))

(cffi::defctype snd-seq-event-type-t :unsigned-char)

(cffi::defctype snd-seq-tick-time-t :unsigned-int)

(cffi:defcstruct snd-seq-real-time
  (tv-sec :unsigned-int)
  (tv-nsec :unsigned-int))

(cffi:defcunion snd-seq-timestamp
  (tick   snd-seq-tick-time-t)
  (time (:pointer (:struct snd-seq-real-time))))

(cffi::defctype snd-seq-timestamp-t (:pointer (:union snd-seq-timestamp)))

(cffi:defcstruct snd-seq-addr
  (client :unsigned-char)
  (port :unsigned-char))

(cffi::defctype snd-seq-addr-t (:pointer (:struct snd-seq-addr)))
;;; Skipping anonymous composite type #<UNION <anonymous> {BB062F9}>


(cffi:defcstruct _snd-config-update
  )

(cffi::defctype snd-config-update-t (:pointer (:struct _snd-config-update)))

(cffi:defcfun ("snd_config_update_r" snd-config-update-r) :int (top :pointer) (update :pointer)
                                                               (path :pointer))

(cffi:defcfun ("snd_config_set_ascii" snd-config-set-ascii) :int (config :pointer) (ascii :pointer))

(cffi:defcstruct _snd-input
  )

(cffi::defctype snd-input-t (:pointer (:struct _snd-input)))

(cffi:defcfun ("snd_input_ungetc" snd-input-ungetc) :int (input :pointer) (c :int))

(cffi:defcfun ("snd_config_copy" snd-config-copy) :int (dst :pointer) (src :pointer))

(cffi::defctype _-gnuc-va-list (:pointer :char))

(cffi:defcfun ("vsscanf" vsscanf) :int (_-s :pointer) (_-format :pointer) (_-arg _-gnuc-va-list))

(cffi::defctype _-ssize-t :int)

(cffi:defcfun ("__getdelim" _-getdelim) _-ssize-t (_-lineptr :pointer) (_-n :pointer)
                                                  (_-delimiter :int) (_-stream :pointer))

(cffi::defctype _-file (:pointer (:struct  _io-file)))

(cffi:defcfun ("ftello64" ftello-64) _-off-64-t (_-stream :pointer))

(cffi::defctype snd-devname-t (:pointer (:struct snd-devname)))

(cffi:defcstruct snd-devname
  (name (:pointer :char))
  (comment (:pointer :char))
  (next :pointer))

(cffi::defctype off-t _-off-t)

(cffi:defcfun ("fcloseall" fcloseall) :int)

(cffi:defcfun ("setvbuf" setvbuf) :int (_-stream :pointer) (_-buf (:pointer :char)) (_-modes :int)
                                       (_-n size-t))

(cffi::defctype va-list _-gnuc-va-list)

(cffi:defcfun ("snd_output_vprintf" snd-output-vprintf) :int (output :pointer) (format :pointer)
                                                             (args va-list))

(cffi:defcfun ("fopen64" fopen-64) :pointer (_-filename :pointer) (_-modes :pointer))

(cffi:defcfun ("snd_config_get_pointer" snd-config-get-pointer) :int (config :pointer)
                                                                     (value :pointer))

(cffi:defcfun ("fmemopen" fmemopen) :pointer (_-s (:pointer :void)) (_-len size-t)
                                             (_-modes :pointer))

(cffi:defcfun ("putchar" putchar) :int (_-c :int))

(cffi:defcfun ("getc" getc) :int (_-stream :pointer))

(cffi:defcfun ("getw" getw) :int (_-stream :pointer))

(cffi:defcfun ("snd_config_make_compound" snd-config-make-compound) :int (config :pointer)
                                                                         (key :pointer) (join :int))

(cffi:defcfun ("funlockfile" funlockfile) :void (_-stream :pointer))

(cffi:defcfun ("snd_config_get_ascii" snd-config-get-ascii) :int (config :pointer) (value :pointer))

(cffi:defcfun ("snd_config_search_definition" snd-config-search-definition) :int (config :pointer)
                                                                                 (base :pointer)
                                                                                 (key :pointer)
                                                                                 (result :pointer))

(cffi::defctype _-time-t :long)

(cffi:defcstruct timespec
  (tv-sec _-time-t)
  (tv-nsec :long))

(cffi:defcstruct _-sigset-t
  (_-val :unsigned-long :count 32))

(cffi:defcfun ("ppoll" ppoll) :int (_-fds :pointer) (_-nfds nfds-t) (_-timeout :pointer)
                                   (_-ss :pointer))

(cffi:defcfun ("tmpfile64" tmpfile-64) :pointer)

(cffi:defcfun ("fseek" fseek) :int (_-stream :pointer) (_-off :long) (_-whence :int))

(cffi:defcfun ("getchar" getchar) :int)

(cffi:defcfun ("fseeko" fseeko) :int (_-stream :pointer) (_-off _-off-t) (_-whence :int))

(cffi:defcfun ("clearerr" clearerr) :void (_-stream :pointer))

(cffi:defcfun ("fwrite_unlocked" fwrite-unlocked) size-t (_-ptr :pointer) (_-size size-t)
                                                         (_-n size-t) (_-stream :pointer))

(cffi:defcfun ("getchar_unlocked" getchar-unlocked) :int)

(cffi:defcfun ("snd_config_evaluate" snd-config-evaluate) :int (config :pointer) (root :pointer)
                                                               (private-data :pointer)
                                                               (result :pointer))

(cffi:defcfun ("snd_config_update_free_global" snd-config-update-free-global) :int)

(cffi:defcstruct snd-seq-ev-ctrl
  (channel :unsigned-char)
  (unused :unsigned-char :count 3)
  (param :unsigned-int)
  (value :int))

(cffi::defctype snd-seq-ev-ctrl-t (:pointer (:struct snd-seq-ev-ctrl)))

(cffi:defcstruct snd-seq-queue-skew
  (value :unsigned-int)
  (base :unsigned-int))

(cffi:defcenum snd-seq-event-type
  (:snd-seq-event-system 0)
  (:snd-seq-event-result 1)
  (:snd-seq-event-note 5)
  (:snd-seq-event-noteon 6)
  (:snd-seq-event-noteoff 7)
  (:snd-seq-event-keypress 8)
  (:snd-seq-event-controller 10)
  (:snd-seq-event-pgmchange 11)
  (:snd-seq-event-chanpress 12)
  (:snd-seq-event-pitchbend 13)
  (:snd-seq-event-control-14 14)
  (:snd-seq-event-nonregparam 15)
  (:snd-seq-event-regparam 16)
  (:snd-seq-event-songpos 20)
  (:snd-seq-event-songsel 21)
  (:snd-seq-event-qframe 22)
  (:snd-seq-event-timesign 23)
  (:snd-seq-event-keysign 24)
  (:snd-seq-event-start 30)
  (:snd-seq-event-continue 31)
  (:snd-seq-event-stop 32)
  (:snd-seq-event-setpos-tick 33)
  (:snd-seq-event-setpos-time 34)
  (:snd-seq-event-tempo 35)
  (:snd-seq-event-clock 36)
  (:snd-seq-event-tick 37)
  (:snd-seq-event-queue-skew 38)
  (:snd-seq-event-sync-pos 39)
  (:snd-seq-event-tune-request 40)
  (:snd-seq-event-reset 41)
  (:snd-seq-event-sensing 42)
  (:snd-seq-event-echo 50)
  (:snd-seq-event-oss 51)
  (:snd-seq-event-client-start 60)
  (:snd-seq-event-client-exit 61)
  (:snd-seq-event-client-change 62)
  (:snd-seq-event-port-start 63)
  (:snd-seq-event-port-exit 64)
  (:snd-seq-event-port-change 65)
  (:snd-seq-event-port-subscribed 66)
  (:snd-seq-event-port-unsubscribed 67)
  (:snd-seq-event-usr-0 90)
  (:snd-seq-event-usr-1 91)
  (:snd-seq-event-usr-2 92)
  (:snd-seq-event-usr-3 93)
  (:snd-seq-event-usr-4 94)
  (:snd-seq-event-usr-5 95)
  (:snd-seq-event-usr-6 96)
  (:snd-seq-event-usr-7 97)
  (:snd-seq-event-usr-8 98)
  (:snd-seq-event-usr-9 99)
  (:snd-seq-event-sysex 130)
  (:snd-seq-event-bounce 131)
  (:snd-seq-event-usr-var-0 135)
  (:snd-seq-event-usr-var-1 136)
  (:snd-seq-event-usr-var-2 137)
  (:snd-seq-event-usr-var-3 138)
  (:snd-seq-event-usr-var-4 139)
  (:snd-seq-event-none 255))

(cffi:defcstruct _snd-config-iterator
  )

(cffi::defctype snd-config-iterator-t :pointer)

(cffi:defcfun ("snd_config_iterator_end" snd-config-iterator-end) snd-config-iterator-t
                                                                                        (node :pointer))

(cffi::defctype ssize-t _-ssize-t)

(cffi:defcfun ("snd_input_buffer_open" snd-input-buffer-open) :int (inputp :pointer)
                                                                   (buffer :pointer) (size ssize-t))

(cffi:defcfun ("snd_config_get_real" snd-config-get-real) :int (config :pointer)
                                                               (value (:pointer :double)))

(cffi:defcfun ("snd_config_delete" snd-config-delete) :int (config :pointer))

(cffi:defcfun ("fdopen" fdopen) :pointer (_-fd :int) (_-modes :pointer))

(cffi:defcfun ("freopen64" freopen-64) :pointer (_-filename :pointer) (_-modes :pointer)
                                                (_-stream :pointer))

(cffi:defcenum _snd-output-type
  (:snd-output-stdio 0)
  (:snd-output-buffer 1))

(cffi:defcfun ("ftrylockfile" ftrylockfile) :int (_-stream :pointer))

(cffi:defcfun ("snd_input_stdio_attach" snd-input-stdio-attach) :int (inputp :pointer) (fp :pointer)
                                                                     (_close :int))

(cffi:defcfun ("fileno_unlocked" fileno-unlocked) :int (_-stream :pointer))

(cffi:defcfun ("snd_config_set_integer64" snd-config-set-integer-64) :int (config :pointer)
                                                                          (value :long-long))

(cffi::defctype snd-output-type-t _snd-output-type)
;;; Skipping anonymous composite type #<UNION <anonymous> {BBCAA19}>

(cffi:defcstruct _-mbstate-t
  (_-count :int)
  (_-value ;;; Skipping anonymous type #<UNION <anonymous> {BBCAA19}>
  ))

(cffi:defcstruct _g-fpos-t
  (_-pos _-off-t)
  (_-state _-mbstate-t))

(cffi::defctype fpos-t _g-fpos-t)

(cffi:defcfun ("fgetpos" fgetpos) :int (_-stream :pointer) (_-pos :pointer))

(cffi:defcfun ("snd_config_load" snd-config-load) :int (config :pointer) (in :pointer))

(cffi:defcfun ("snd_config_save" snd-config-save) :int (config :pointer) (out :pointer))

(cffi:defcstruct _g-fpos-64-t
  (_-pos _-off-64-t)
  (_-state _-mbstate-t))

(cffi::defctype fpos-64-t _g-fpos-64-t)

(cffi:defcfun ("snd_config_get_bool" snd-config-get-bool) :int (conf :pointer))

(cffi:defcvar ("stdin" stdin) :pointer)

(cffi:defcfun ("putchar_unlocked" putchar-unlocked) :int (_-c :int))

(cffi:defcfun ("tmpnam" tmpnam) (:pointer :char) (_-s (:pointer :char)))

(cffi:defcfun ("cuserid" cuserid) (:pointer :char) (_-s (:pointer :char)))

(cffi:defcfun ("snd_config_delete_compound_members" snd-config-delete-compound-members) :int
                                                                                             (config :pointer))

(cffi:defcstruct snd-seq-connect
  (sender snd-seq-addr-t)
  (dest snd-seq-addr-t))

(cffi::defctype snd-seq-connect-t snd-seq-connect)

(cffi:defcfun ("snd_input_getc" snd-input-getc) :int (input :pointer))

(cffi:defcvar ("snd_config" snd-config) :pointer)

(cffi:defcfun ("tempnam" tempnam) (:pointer :char) (_-dir :pointer) (_-pfx :pointer))

(cffi:defcfun ("snd_output_stdio_attach" snd-output-stdio-attach) :int (outputp :pointer)
                                                                       (fp :pointer) (_close :int))

(cffi:defcfun ("snd_config_searchv" snd-config-searchv) :int (config :pointer)
                                                             (result :pointer)common-lisp:&rest)

(cffi:defcfun ("fscanf" fscanf) :int (_-stream :pointer) (_-format :pointer)common-lisp:&rest)

(cffi:defcfun ("perror" perror) :void (_-s :pointer))

(cffi:defcfun ("snd_output_buffer_open" snd-output-buffer-open) :int (outputp :pointer))

(cffi::defctype snd-seq-ev-note-t snd-seq-ev-note)

(cffi:defcstruct snd-seq-ev-raw-32
  (d :unsigned-int :count 3))

(cffi:defcfun ("fileno" fileno) :int (_-stream :pointer))

(cffi:defcfun ("ferror" ferror) :int (_-stream :pointer))

(cffi:defcfun ("vfscanf" vfscanf) :int (_-s :pointer) (_-format :pointer) (_-arg _-gnuc-va-list))

(cffi:defcfun ("scanf" scanf) :int (_-format :pointer)common-lisp:&rest)
;;; Skipping anonymous composite type #<UNION <anonymous> {BBD2611}>

(cffi:defcstruct snd-seq-ev-queue-control
  (queue :unsigned-char)
  (unused :unsigned-char :count 3)
  (param ;;; Skipping anonymous type #<UNION <anonymous> {BBD2611}>
  ))

(cffi::defctype snd-seq-ev-queue-control-t snd-seq-ev-queue-control)

(cffi:defcfun ("fsetpos" fsetpos) :int (_-stream :pointer) (_-pos :pointer))

(cffi:defcfun ("snd_output_printf" snd-output-printf) :int (output :pointer)
                                                           (format :pointer)common-lisp:&rest)

(cffi:defcfun ("setbuffer" setbuffer) :void (_-stream :pointer) (_-buf (:pointer :char))
                                            (_-size size-t))

(cffi:defcfun ("rename" rename) :int (_-old :pointer) (_-new :pointer))

(cffi:defcfun ("getdelim" getdelim) _-ssize-t (_-lineptr :pointer) (_-n :pointer) (_-delimiter :int)
                                              (_-stream :pointer))

(cffi:defcfun ("snd_config_get_id" snd-config-get-id) :int (config :pointer) (value :pointer))

(cffi:defcfun ("snd_config_expand" snd-config-expand) :int (config :pointer) (root :pointer)
                                                           (args :pointer) (private-data :pointer)
                                                           (result :pointer))

(cffi:defcfun ("fsetpos64" fsetpos-64) :int (_-stream :pointer) (_-pos :pointer))

(cffi:defcfun ("snd_output_flush" snd-output-flush) :int (output :pointer))

(cffi:defcfun ("clearerr_unlocked" clearerr-unlocked) :void (_-stream :pointer))

(cffi:defcfun ("snd_config_iterator_first" snd-config-iterator-first) snd-config-iterator-t
                                                                                            (node :pointer))

(cffi:defcstruct snd-seq-result
  (event :int)
  (result :int))

(cffi:defcfun ("ctermid" ctermid) (:pointer :char) (_-s (:pointer :char)))

(cffi:defcfun ("fputc_unlocked" fputc-unlocked) :int (_-c :int) (_-stream :pointer))

(cffi:defcfun ("freopen" freopen) :pointer (_-filename :pointer) (_-modes :pointer)
                                           (_-stream :pointer))

(cffi:defcfun ("snd_config_get_string" snd-config-get-string) :int (config :pointer)
                                                                   (value :pointer))

(cffi:defcfun ("fputc" fputc) :int (_-c :int) (_-stream :pointer))

(cffi:defcfun ("fputs" fputs) :int (_-s :pointer) (_-stream :pointer))

(cffi:defcstruct snd-seq-ev-ext
  (len :unsigned-int)
  (ptr (:pointer :void)))

(cffi:defcfun ("snd_output_buffer_string" snd-output-buffer-string) size-t (output :pointer)
                                                                           (buf :pointer))

(cffi:defcfun ("getc_unlocked" getc-unlocked) :int (_-fp :pointer))

(cffi:defcfun ("ftell" ftell) :long (_-stream :pointer))

(cffi:defcfun ("snd_input_gets" snd-input-gets) (:pointer :char) (input :pointer)
                                                                 (str (:pointer :char))
                                                                 (size size-t))

(cffi:defcstruct snd-seq-ev-raw-8
  (d :unsigned-char :count 12))

(cffi::defctype snd-seq-ev-raw-8-t snd-seq-ev-raw-8)

(cffi:defcfun ("snd_config_imake_integer64" snd-config-imake-integer-64) :int (config :pointer)
                                                                              (key :pointer)
                                                                              (value :long-long))

(cffi:defcfun ("snd_config_update" snd-config-update) :int)

(cffi:defcfun ("pclose" pclose) :int (_-stream :pointer))

(cffi:defcfun ("snd_config_imake_real" snd-config-imake-real) :int (config :pointer) (key :pointer)
                                                                   (value :double))

(cffi:defcfun ("fclose" fclose) :int (_-stream :pointer))

(cffi:defcfun ("snd_config_set_id" snd-config-set-id) :int (config :pointer) (id :pointer))

(cffi:defcfun ("snd_config_imake_string" snd-config-imake-string) :int (config :pointer)
                                                                       (key :pointer)
                                                                       (ascii :pointer))

(cffi:defcfun ("snd_input_stdio_open" snd-input-stdio-open) :int (inputp :pointer) (file :pointer)
                                                                 (mode :pointer))

(cffi:defcfun ("snd_output_stdio_open" snd-output-stdio-open) :int (outputp :pointer)
                                                                   (file :pointer) (mode :pointer))

(cffi:defcfun ("sscanf" sscanf) :int (_-s :pointer) (_-format :pointer)common-lisp:&rest)

(cffi:defcfun ("fwrite" fwrite) size-t (_-ptr :pointer) (_-size size-t) (_-n size-t) (_-s :pointer))

(cffi:defcfun ("ungetc" ungetc) :int (_-c :int) (_-stream :pointer))

(cffi:defcfun ("snd_input_scanf" snd-input-scanf) :int (input :pointer)
                                                       (format :pointer)common-lisp:&rest)

(cffi:defcfun ("snd_config_set_integer" snd-config-set-integer) :int (config :pointer) (value :long))

(cffi:defcfun ("snd_config_get_integer64" snd-config-get-integer-64) :int (config :pointer)
                                                                          (value (:pointer :long-long)))

(cffi:defcfun ("snd_names_list" snd-names-list) :int (iface :pointer) (list :pointer))

(cffi:defcfun ("snd_config_make_integer" snd-config-make-integer) :int (config :pointer)
                                                                       (key :pointer))

(cffi::defctype _-io-read-fn :pointer)

(cffi::defctype _-io-write-fn :pointer)

(cffi::defctype _-io-seek-fn :pointer)

(cffi::defctype _-io-close-fn :pointer)

(cffi:defcstruct _io-cookie-io-functions-t
  (read :pointer)
  (write :pointer)
  (seek :pointer)
  (close :pointer))

(cffi:defcfun ("fopencookie" fopencookie) :pointer (_-magic-cookie (:pointer :void))
                                                   (_-modes :pointer)
                                                   (_-io-funcs _io-cookie-io-functions-t))

(cffi:defcfun ("getline" getline) _-ssize-t (_-lineptr :pointer) (_-n :pointer) (_-stream :pointer))

(cffi:defcfun ("snd_config_get_ireal" snd-config-get-ireal) :int (config :pointer)
                                                                 (value (:pointer :double)))

(cffi:defcfun ("tmpnam_r" tmpnam-r) (:pointer :char) (_-s (:pointer :char)))

(cffi:defcfun ("setbuf" setbuf) :void (_-stream :pointer) (_-buf (:pointer :char)))

(cffi:defcfun ("snd_config_get_ctl_iface" snd-config-get-ctl-iface) :int (conf :pointer))

(cffi:defcenum _snd-input-type
  (:snd-input-stdio 0)
  (:snd-input-buffer 1))

(cffi::defctype snd-input-type-t _snd-input-type)

(cffi::defctype snd-seq-result-t snd-seq-result)

(cffi:defcfun ("putc" putc) :int (_-c :int) (_-stream :pointer))

(cffi:defcfun ("snd_config_top" snd-config-top) :int (config :pointer))

(cffi:defcfun ("snd_output_close" snd-output-close) :int (output :pointer))

(cffi:defcfun ("puts" puts) :int (_-s :pointer))

(cffi:defcfun ("putw" putw) :int (_-w :int) (_-stream :pointer))

(cffi:defcfun ("snd_config_update_free" snd-config-update-free) :int (update :pointer))

(cffi:defcfun ("fopen" fopen) :pointer (_-filename :pointer) (_-modes :pointer))

(cffi:defcfun ("feof" feof) :int (_-stream :pointer))

(cffi:defcfun ("snd_config_iterator_next" snd-config-iterator-next) snd-config-iterator-t
                                                                                          (iterator snd-config-iterator-t))

(cffi:defcfun ("snd_config_set_pointer" snd-config-set-pointer) :int (config :pointer)
                                                                     (ptr :pointer))

(cffi:defcvar ("stdout" stdout) :pointer)

(cffi:defcfun ("snd_config_imake_integer" snd-config-imake-integer) :int (config :pointer)
                                                                         (key :pointer)
                                                                         (value :long))

(cffi:defcfun ("snd_config_test_id" snd-config-test-id) :int (config :pointer) (id :pointer))

(cffi:defcfun ("snd_config_make_pointer" snd-config-make-pointer) :int (config :pointer)
                                                                       (key :pointer))

(cffi:defcfun ("snd_names_list_free" snd-names-list-free) :void (list :pointer))

(cffi:defcfun ("snd_config_make_real" snd-config-make-real) :int (config :pointer) (key :pointer))

(cffi:defcfun ("ferror_unlocked" ferror-unlocked) :int (_-stream :pointer))

(cffi:defcfun ("feof_unlocked" feof-unlocked) :int (_-stream :pointer))

(cffi:defcfun ("fputs_unlocked" fputs-unlocked) :int (_-s :pointer) (_-stream :pointer))

(cffi:defcfun ("setlinebuf" setlinebuf) :void (_-stream :pointer))

(cffi:defcfun ("snd_config_make_string" snd-config-make-string) :int (config :pointer)
                                                                     (key :pointer))

(cffi::defctype snd-seq-queue-skew-t snd-seq-queue-skew)

(cffi:defcfun ("open_memstream" open-memstream) :pointer (_-bufloc :pointer) (_-sizeloc :pointer))

(cffi:defcfun ("snd_config_make" snd-config-make) :int (config :pointer) (key :pointer)
                                                       (type snd-config-type-t))

(cffi:defcfun ("snd_config_set_string" snd-config-set-string) :int (config :pointer)
                                                                   (value :pointer))

(cffi::defctype off-64-t _-off-64-t)

(cffi:defcfun ("rewind" rewind) :void (_-stream :pointer))

(cffi:defcfun ("snd_config_imake_pointer" snd-config-imake-pointer) :int (config :pointer)
                                                                         (key :pointer)
                                                                         (ptr :pointer))

(cffi:defcfun ("fflush_unlocked" fflush-unlocked) :int (_-stream :pointer))

(cffi:defcfun ("snd_input_close" snd-input-close) :int (input :pointer))

(cffi:defcfun ("flockfile" flockfile) :void (_-stream :pointer))

(cffi:defcfun ("fgetpos64" fgetpos-64) :int (_-stream :pointer) (_-pos :pointer))

(cffi:defcfun ("snd_config_iterator_entry" snd-config-iterator-entry) :pointer
                                                                               (iterator snd-config-iterator-t))

(cffi:defcfun ("vscanf" vscanf) :int (_-format :pointer) (_-arg _-gnuc-va-list))

(cffi:defcfun ("fgetc" fgetc) :int (_-stream :pointer))

(cffi::defctype snd-seq-ev-raw-32-t snd-seq-ev-raw-32)

(cffi::defctype snd-seq-ev-ext-t snd-seq-ev-ext)

(cffi:defcfun ("snd_config_load_override" snd-config-load-override) :int (config :pointer)
                                                                         (in :pointer))

(cffi::defctype snd-seq-real-time-t snd-seq-real-time)

(cffi:defcfun ("snd_config_add" snd-config-add) :int (config :pointer) (leaf :pointer))

(cffi:defcfun ("_ZN15snd_seq_ev_noteaSERKS_" snd-seq-ev-note-operator-=) snd-seq-ev-note (this :pointer)
                                                                                         (arg1 snd-seq-ev-note))

(cffi:defcfun ("_ZN15snd_seq_ev_noteC1ERKS_" snd-seq-ev-note-constructor) :void (this :pointer)
                                                                                (arg1 snd-seq-ev-note))

(cl:defun snd-seq-ev-note-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-note)))
    (snd-seq-ev-note-constructor instance)
    instance))

(cffi:defcfun ("_ZN15snd_seq_ev_noteC1Ev" snd-seq-ev-note-constructor) :void (this :pointer))

(cl:defun snd-seq-ev-note-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-note)))
    (snd-seq-ev-note-constructor instance)
    instance))

(cffi:defcfun ("_ZN13snd_seq_eventaSERKS_" snd-seq-event-operator-=) snd-seq-event (this :pointer)
                                                                                   (arg1 snd-seq-event))

(cffi:defcfun ("_ZN13snd_seq_eventC1ERKS_" snd-seq-event-constructor) :void (this :pointer)
                                                                            (arg1 snd-seq-event))

(cl:defun snd-seq-event-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-event)))
    (snd-seq-event-constructor instance)
    instance))

(cffi:defcfun ("_ZN13snd_seq_eventC1Ev" snd-seq-event-constructor) :void (this :pointer))

(cl:defun snd-seq-event-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-event)))
    (snd-seq-event-constructor instance)
    instance))

(cffi:defcfun ("_ZN11snd_devnameaSERKS_" snd-devname-operator-=) snd-devname (this :pointer)
                                                                             (arg1 snd-devname))

(cffi:defcfun ("_ZN11snd_devnameC1ERKS_" snd-devname-constructor) :void (this :pointer)
                                                                        (arg1 snd-devname))

(cl:defun snd-devname-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-devname)))
    (snd-devname-constructor instance)
    instance))

(cffi:defcfun ("_ZN11snd_devnameC1Ev" snd-devname-constructor) :void (this :pointer))

(cl:defun snd-devname-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-devname)))
    (snd-devname-constructor instance)
    instance))

(cffi:defcfun ("_ZN12snd_seq_addraSERKS_" snd-seq-addr-operator-=) snd-seq-addr (this :pointer)
                                                                                (arg1 snd-seq-addr))

(cffi:defcfun ("_ZN12snd_seq_addrC1ERKS_" snd-seq-addr-constructor) :void (this :pointer)
                                                                          (arg1 snd-seq-addr))

(cl:defun snd-seq-addr-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-addr)))
    (snd-seq-addr-constructor instance)
    instance))

(cffi:defcfun ("_ZN12snd_seq_addrC1Ev" snd-seq-addr-constructor) :void (this :pointer))

(cl:defun snd-seq-addr-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-addr)))
    (snd-seq-addr-constructor instance)
    instance))

(cffi:defcfun ("_ZN15snd_seq_ev_ctrlaSERKS_" snd-seq-ev-ctrl-operator-=) snd-seq-ev-ctrl (this :pointer)
                                                                                         (arg1 snd-seq-ev-ctrl))

(cffi:defcfun ("_ZN15snd_seq_ev_ctrlC1ERKS_" snd-seq-ev-ctrl-constructor) :void (this :pointer)
                                                                                (arg1 snd-seq-ev-ctrl))

(cl:defun snd-seq-ev-ctrl-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-ctrl)))
    (snd-seq-ev-ctrl-constructor instance)
    instance))

(cffi:defcfun ("_ZN15snd_seq_ev_ctrlC1Ev" snd-seq-ev-ctrl-constructor) :void (this :pointer))

(cl:defun snd-seq-ev-ctrl-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-ctrl)))
    (snd-seq-ev-ctrl-constructor instance)
    instance))

(cffi:defcfun ("_ZN18snd_seq_queue_skewaSERKS_" snd-seq-queue-skew-operator-=) snd-seq-queue-skew (this :pointer)
                                                                                                  (arg1 snd-seq-queue-skew))

(cffi:defcfun ("_ZN18snd_seq_queue_skewC1ERKS_" snd-seq-queue-skew-constructor) :void (this :pointer)
                                                                                      (arg1 snd-seq-queue-skew))

(cl:defun snd-seq-queue-skew-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-queue-skew)))
    (snd-seq-queue-skew-constructor instance)
    instance))

(cffi:defcfun ("_ZN18snd_seq_queue_skewC1Ev" snd-seq-queue-skew-constructor) :void (this :pointer))

(cl:defun snd-seq-queue-skew-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-queue-skew)))
    (snd-seq-queue-skew-constructor instance)
    instance))

(cffi:defcfun ("_ZN15snd_seq_connectaSERKS_" snd-seq-connect-operator-=) snd-seq-connect (this :pointer)
                                                                                         (arg1 snd-seq-connect))

(cffi:defcfun ("_ZN15snd_seq_connectC1ERKS_" snd-seq-connect-constructor) :void (this :pointer)
                                                                                (arg1 snd-seq-connect))

(cl:defun snd-seq-connect-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-connect)))
    (snd-seq-connect-constructor instance)
    instance))

(cffi:defcfun ("_ZN15snd_seq_connectC1Ev" snd-seq-connect-constructor) :void (this :pointer))

(cl:defun snd-seq-connect-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-connect)))
    (snd-seq-connect-constructor instance)
    instance))

(cffi:defcfun ("_ZN16snd_seq_ev_raw32aSERKS_" snd-seq-ev-raw-32-operator-=) snd-seq-ev-raw-32 (this :pointer)
                                                                                              (arg1 snd-seq-ev-raw-32))

(cffi:defcfun ("_ZN16snd_seq_ev_raw32C1ERKS_" snd-seq-ev-raw-32-constructor) :void (this :pointer)
                                                                                   (arg1 snd-seq-ev-raw-32))

(cl:defun snd-seq-ev-raw-32-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-raw-32)))
    (snd-seq-ev-raw-32-constructor instance)
    instance))

(cffi:defcfun ("_ZN16snd_seq_ev_raw32C1Ev" snd-seq-ev-raw-32-constructor) :void (this :pointer))

(cl:defun snd-seq-ev-raw-32-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-raw-32)))
    (snd-seq-ev-raw-32-constructor instance)
    instance))

(cffi:defcfun ("_ZN24snd_seq_ev_queue_controlaSERKS_" snd-seq-ev-queue-control-operator-=) snd-seq-ev-queue-control (this :pointer)
                                                                                                                    (arg1 snd-seq-ev-queue-control))

(cffi:defcfun ("_ZN24snd_seq_ev_queue_controlC1ERKS_" snd-seq-ev-queue-control-constructor) :void (this :pointer)
                                                                                                  (arg1 snd-seq-ev-queue-control))

(cl:defun snd-seq-ev-queue-control-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-queue-control)))
    (snd-seq-ev-queue-control-constructor instance)
    instance))

(cffi:defcfun ("_ZN24snd_seq_ev_queue_controlC1Ev" snd-seq-ev-queue-control-constructor) :void (this :pointer))

(cl:defun snd-seq-ev-queue-control-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-queue-control)))
    (snd-seq-ev-queue-control-constructor instance)
    instance))

(cffi:defcfun ("_ZN17snd_seq_timestampaSERKS_" snd-seq-timestamp-operator-=) snd-seq-timestamp (this :pointer)
                                                                                               (arg1 snd-seq-timestamp))

(cffi:defcfun ("_ZN17snd_seq_timestampC1ERKS_" snd-seq-timestamp-constructor) :void (this :pointer)
                                                                                    (arg1 snd-seq-timestamp))

(cl:defun snd-seq-timestamp-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-timestamp)))
    (snd-seq-timestamp-constructor instance)
    instance))

(cffi:defcfun ("_ZN17snd_seq_timestampC1Ev" snd-seq-timestamp-constructor) :void (this :pointer))

(cl:defun snd-seq-timestamp-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-timestamp)))
    (snd-seq-timestamp-constructor instance)
    instance))

(cffi:defcfun ("_ZN14snd_seq_resultaSERKS_" snd-seq-result-operator-=) snd-seq-result (this :pointer)
                                                                                      (arg1 snd-seq-result))

(cffi:defcfun ("_ZN14snd_seq_resultC1ERKS_" snd-seq-result-constructor) :void (this :pointer)
                                                                              (arg1 snd-seq-result))

(cl:defun snd-seq-result-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-result)))
    (snd-seq-result-constructor instance)
    instance))

(cffi:defcfun ("_ZN14snd_seq_resultC1Ev" snd-seq-result-constructor) :void (this :pointer))

(cl:defun snd-seq-result-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-result)))
    (snd-seq-result-constructor instance)
    instance))

(cffi:defcfun ("_ZN14snd_seq_ev_extaSERKS_" snd-seq-ev-ext-operator-=) snd-seq-ev-ext (this :pointer)
                                                                                      (arg1 snd-seq-ev-ext))

(cffi:defcfun ("_ZN14snd_seq_ev_extC1ERKS_" snd-seq-ev-ext-constructor) :void (this :pointer)
                                                                              (arg1 snd-seq-ev-ext))

(cl:defun snd-seq-ev-ext-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-ext)))
    (snd-seq-ev-ext-constructor instance)
    instance))

(cffi:defcfun ("_ZN14snd_seq_ev_extC1Ev" snd-seq-ev-ext-constructor) :void (this :pointer))

(cl:defun snd-seq-ev-ext-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-ext)))
    (snd-seq-ev-ext-constructor instance)
    instance))

(cffi:defcfun ("_ZN15snd_seq_ev_raw8aSERKS_" snd-seq-ev-raw-8-operator-=) snd-seq-ev-raw-8 (this :pointer)
                                                                                           (arg1 snd-seq-ev-raw-8))

(cffi:defcfun ("_ZN15snd_seq_ev_raw8C1ERKS_" snd-seq-ev-raw-8-constructor) :void (this :pointer)
                                                                                 (arg1 snd-seq-ev-raw-8))

(cl:defun snd-seq-ev-raw-8-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-raw-8)))
    (snd-seq-ev-raw-8-constructor instance)
    instance))

(cffi:defcfun ("_ZN15snd_seq_ev_raw8C1Ev" snd-seq-ev-raw-8-constructor) :void (this :pointer))

(cl:defun snd-seq-ev-raw-8-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-ev-raw-8)))
    (snd-seq-ev-raw-8-constructor instance)
    instance))

(cffi:defcfun ("_ZN6pollfdaSERKS_" pollfd-operator-=) pollfd (this :pointer) (arg1 pollfd))

(cffi:defcfun ("_ZN6pollfdC1ERKS_" pollfd-constructor) :void (this :pointer) (arg1 pollfd))

(cl:defun pollfd-new ()
  (cl:let ((instance (cffi:foreign-alloc 'pollfd)))
    (pollfd-constructor instance)
    instance))

(cffi:defcfun ("_ZN6pollfdC1Ev" pollfd-constructor) :void (this :pointer))

(cl:defun pollfd-new ()
  (cl:let ((instance (cffi:foreign-alloc 'pollfd)))
    (pollfd-constructor instance)
    instance))

(cffi:defcfun ("_ZN17snd_seq_real_timeaSERKS_" snd-seq-real-time-operator-=) snd-seq-real-time (this :pointer)
                                                                                               (arg1 snd-seq-real-time))

(cffi:defcfun ("_ZN17snd_seq_real_timeC1ERKS_" snd-seq-real-time-constructor) :void (this :pointer)
                                                                                    (arg1 snd-seq-real-time))

(cl:defun snd-seq-real-time-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-real-time)))
    (snd-seq-real-time-constructor instance)
    instance))

(cffi:defcfun ("_ZN17snd_seq_real_timeC1Ev" snd-seq-real-time-constructor) :void (this :pointer))

(cl:defun snd-seq-real-time-new ()
  (cl:let ((instance (cffi:foreign-alloc 'snd-seq-real-time)))
    (snd-seq-real-time-constructor instance)
    instance))

(cffi:defcfun ("_ZN13snd_seq_event3._8aSERKS0_" -operator-=) ;;; Skipping anonymous type #<UNION <anonymous> {BB062F9}>
 (this :pointer) (arg1 ;;; Skipping anonymous type #<UNION <anonymous> {BB062F9}>
))

(cffi:defcfun ("_ZN13snd_seq_event3._8C1ERKS0_" -constructor) :void (this :pointer)
                                                                    (arg1 ;;; Skipping anonymous type #<UNION
                                                                                                        <anonymous>
                                                                                                        {BB062F9}>
))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN13snd_seq_event3._8C1Ev" -constructor) :void (this :pointer))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN24snd_seq_ev_queue_control3._7aSERKS0_" -operator-=) ;;; Skipping anonymous type #<UNION <anonymous> {BBD2611}>
 (this :pointer) (arg1 ;;; Skipping anonymous type #<UNION <anonymous> {BBD2611}>
))

(cffi:defcfun ("_ZN24snd_seq_ev_queue_control3._7C1ERKS0_" -constructor) :void (this :pointer)
                                                                               (arg1 ;;; Skipping anonymous type #<UNION
                                                                                                                   <anonymous>
                                                                                                                   {BBD2611}>
))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN24snd_seq_ev_queue_control3._7C1Ev" -constructor) :void (this :pointer))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))


(cffi:defcunion snd-seq-event-data
  (note snd-seq-ev-note-t)
  (control snd-seq-ev-ctrl-t)
  (raw-8 snd-seq-ev-raw-8-t)
  (raw-32 snd-seq-ev-raw-32-t)
  (ext snd-seq-ev-ext-t)
  (queue snd-seq-ev-queue-control-t)
  (time snd-seq-timestamp-t)
  (addr snd-seq-addr-t)
  (connect snd-seq-connect-t)
  (result snd-seq-result-t))

(cffi:defcstruct snd-seq-event
  (type snd-seq-event-type-t)
  (flags :unsigned-char)
  (tag :unsigned-char)
  (queue :unsigned-char)
  (time snd-seq-timestamp-t)
  (source snd-seq-addr-t)
  (dest snd-seq-addr-t)
  (data snd-seq-event-data))

(cffi::defctype snd-seq-event-t snd-seq-event)
