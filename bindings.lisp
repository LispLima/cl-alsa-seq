;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.3
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :cl-alsaseq)



;; (cffi:defcenum snd_mixer_elem_type_t
;; 	:SND_MIXER_ELEM_SIMPLE
;; 	(:SND_MIXER_ELEM_LAST #.SND_MIXER_ELEM_SIMPLE))

(cffi:defcfun ("snd_mixer_open" snd_mixer_open) :int
  (mixer :pointer)
  (mode :int))

(cffi:defcfun ("snd_mixer_close" snd_mixer_close) :int
  (mixer :pointer))

(cffi:defcfun ("snd_mixer_first_elem" snd_mixer_first_elem) :pointer
  (mixer :pointer))

(cffi:defcfun ("snd_mixer_last_elem" snd_mixer_last_elem) :pointer
  (mixer :pointer))

(cffi:defcfun ("snd_mixer_handle_events" snd_mixer_handle_events) :int
  (mixer :pointer))

(cffi:defcfun ("snd_mixer_attach" snd_mixer_attach) :int
  (mixer :pointer)
  (name :string))

(cffi:defcfun ("snd_mixer_attach_hctl" snd_mixer_attach_hctl) :int
  (mixer :pointer)
  (hctl :pointer))

(cffi:defcfun ("snd_mixer_detach" snd_mixer_detach) :int
  (mixer :pointer)
  (name :string))

(cffi:defcfun ("snd_mixer_detach_hctl" snd_mixer_detach_hctl) :int
  (mixer :pointer)
  (hctl :pointer))

(cffi:defcfun ("snd_mixer_get_hctl" snd_mixer_get_hctl) :int
  (mixer :pointer)
  (name :string)
  (hctl :pointer))

(cffi:defcfun ("snd_mixer_poll_descriptors_count" snd_mixer_poll_descriptors_count) :int
  (mixer :pointer))

(cffi:defcfun ("snd_mixer_poll_descriptors" snd_mixer_poll_descriptors) :int
  (mixer :pointer)
  (pfds :pointer)
  (space :unsigned-int))

(cffi:defcfun ("snd_mixer_poll_descriptors_revents" snd_mixer_poll_descriptors_revents) :int
  (mixer :pointer)
  (pfds :pointer)
  (nfds :unsigned-int)
  (revents :pointer))

(cffi:defcfun ("snd_mixer_load" snd_mixer_load) :int
  (mixer :pointer))

(cffi:defcfun ("snd_mixer_free" snd_mixer_free) :void
  (mixer :pointer))

(cffi:defcfun ("snd_mixer_wait" snd_mixer_wait) :int
  (mixer :pointer)
  (timeout :int))

(cffi:defcfun ("snd_mixer_set_compare" snd_mixer_set_compare) :int
  (mixer :pointer)
  (msort :pointer))

(cffi:defcfun ("snd_mixer_set_callback" snd_mixer_set_callback) :void
  (obj :pointer)
  (val :pointer))

(cffi:defcfun ("snd_mixer_get_callback_private" snd_mixer_get_callback_private) :pointer
  (obj :pointer))

(cffi:defcfun ("snd_mixer_set_callback_private" snd_mixer_set_callback_private) :void
  (obj :pointer)
  (val :pointer))

(cffi:defcfun ("snd_mixer_get_count" snd_mixer_get_count) :unsigned-int
  (obj :pointer))

(cffi:defcfun ("snd_mixer_class_unregister" snd_mixer_class_unregister) :int
  (clss :pointer))

(cffi:defcfun ("snd_mixer_elem_next" snd_mixer_elem_next) :pointer
  (elem :pointer))

(cffi:defcfun ("snd_mixer_elem_prev" snd_mixer_elem_prev) :pointer
  (elem :pointer))

(cffi:defcfun ("snd_mixer_elem_set_callback" snd_mixer_elem_set_callback) :void
  (obj :pointer)
  (val :pointer))

(cffi:defcfun ("snd_mixer_elem_get_callback_private" snd_mixer_elem_get_callback_private) :pointer
  (obj :pointer))

(cffi:defcfun ("snd_mixer_elem_set_callback_private" snd_mixer_elem_set_callback_private) :void
  (obj :pointer)
  (val :pointer))

(cffi:defcfun ("snd_mixer_elem_get_type" snd_mixer_elem_get_type) snd_mixer_elem_type_t
  (obj :pointer))

(cffi:defcfun ("snd_mixer_class_register" snd_mixer_class_register) :int
  (class_ :pointer)
  (mixer :pointer))

(cffi:defcfun ("snd_mixer_elem_new" snd_mixer_elem_new) :int
  (elem :pointer)
  (type snd_mixer_elem_type_t)
  (compare_weight :int)
  (private_data :pointer)
  (private_free :pointer))

(cffi:defcfun ("snd_mixer_elem_add" snd_mixer_elem_add) :int
  (elem :pointer)
  (class_ :pointer))

(cffi:defcfun ("snd_mixer_elem_remove" snd_mixer_elem_remove) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_elem_free" snd_mixer_elem_free) :void
  (elem :pointer))

(cffi:defcfun ("snd_mixer_elem_info" snd_mixer_elem_info) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_elem_value" snd_mixer_elem_value) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_elem_attach" snd_mixer_elem_attach) :int
  (melem :pointer)
  (helem :pointer))

(cffi:defcfun ("snd_mixer_elem_detach" snd_mixer_elem_detach) :int
  (melem :pointer)
  (helem :pointer))

(cffi:defcfun ("snd_mixer_elem_empty" snd_mixer_elem_empty) :int
  (melem :pointer))

(cffi:defcfun ("snd_mixer_elem_get_private" snd_mixer_elem_get_private) :pointer
  (melem :pointer))

(cffi:defcfun ("snd_mixer_class_sizeof" snd_mixer_class_sizeof) :pointer)

(cffi:defcfun ("snd_mixer_class_malloc" snd_mixer_class_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_mixer_class_free" snd_mixer_class_free) :void
  (obj :pointer))

(cffi:defcfun ("snd_mixer_class_copy" snd_mixer_class_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_mixer_class_get_mixer" snd_mixer_class_get_mixer) :pointer
  (class_ :pointer))

(cffi:defcfun ("snd_mixer_class_get_event" snd_mixer_class_get_event) :pointer
  (class_ :pointer))

(cffi:defcfun ("snd_mixer_class_get_private" snd_mixer_class_get_private) :pointer
  (class_ :pointer))

(cffi:defcfun ("snd_mixer_class_get_compare" snd_mixer_class_get_compare) :pointer
  (class_ :pointer))

(cffi:defcfun ("snd_mixer_class_set_event" snd_mixer_class_set_event) :int
  (class_ :pointer)
  (event :pointer))

(cffi:defcfun ("snd_mixer_class_set_private" snd_mixer_class_set_private) :int
  (class_ :pointer)
  (private_data :pointer))

(cffi:defcfun ("snd_mixer_class_set_private_free" snd_mixer_class_set_private_free) :int
  (class_ :pointer)
  (private_free :pointer))

(cffi:defcfun ("snd_mixer_class_set_compare" snd_mixer_class_set_compare) :int
  (class_ :pointer)
  (compare :pointer))

(cffi:defcenum snd_mixer_selem_channel_id_t
	(:SND_MIXER_SCHN_UNKNOWN #.-1)
	(:SND_MIXER_SCHN_FRONT_LEFT #.0)
	:SND_MIXER_SCHN_FRONT_RIGHT
	:SND_MIXER_SCHN_REAR_LEFT
	:SND_MIXER_SCHN_REAR_RIGHT
	:SND_MIXER_SCHN_FRONT_CENTER
	:SND_MIXER_SCHN_WOOFER
	:SND_MIXER_SCHN_SIDE_LEFT
	:SND_MIXER_SCHN_SIDE_RIGHT
	:SND_MIXER_SCHN_REAR_CENTER
	(:SND_MIXER_SCHN_LAST #.31)
	;; (:SND_MIXER_SCHN_MONO #.SND_MIXER_SCHN_FRONT_LEFT)
        )

(cffi:defcenum snd_mixer_selem_regopt_abstract
	(:SND_MIXER_SABSTRACT_NONE #.0)
	:SND_MIXER_SABSTRACT_BASIC)

(cffi:defcstruct snd_mixer_selem_regopt
	(ver :int)
	(abstract snd_mixer_selem_regopt_abstract)
	(device :string)
	(playback_pcm :pointer)
	(capture_pcm :pointer))

(cffi:defcfun ("snd_mixer_selem_channel_name" snd_mixer_selem_channel_name) :string
  (channel snd_mixer_selem_channel_id_t))

(cffi:defcfun ("snd_mixer_selem_register" snd_mixer_selem_register) :int
  (mixer :pointer)
  (options :pointer)
  (classp :pointer))

(cffi:defcfun ("snd_mixer_selem_get_id" snd_mixer_selem_get_id) :void
  (element :pointer)
  (id :pointer))

(cffi:defcfun ("snd_mixer_selem_get_name" snd_mixer_selem_get_name) :string
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_get_index" snd_mixer_selem_get_index) :unsigned-int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_find_selem" snd_mixer_find_selem) :pointer
  (mixer :pointer)
  (id :pointer))

(cffi:defcfun ("snd_mixer_selem_is_active" snd_mixer_selem_is_active) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_is_playback_mono" snd_mixer_selem_is_playback_mono) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_playback_channel" snd_mixer_selem_has_playback_channel) :int
  (obj :pointer)
  (channel snd_mixer_selem_channel_id_t))

(cffi:defcfun ("snd_mixer_selem_is_capture_mono" snd_mixer_selem_is_capture_mono) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_capture_channel" snd_mixer_selem_has_capture_channel) :int
  (obj :pointer)
  (channel snd_mixer_selem_channel_id_t))

(cffi:defcfun ("snd_mixer_selem_get_capture_group" snd_mixer_selem_get_capture_group) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_common_volume" snd_mixer_selem_has_common_volume) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_playback_volume" snd_mixer_selem_has_playback_volume) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_playback_volume_joined" snd_mixer_selem_has_playback_volume_joined) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_capture_volume" snd_mixer_selem_has_capture_volume) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_capture_volume_joined" snd_mixer_selem_has_capture_volume_joined) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_common_switch" snd_mixer_selem_has_common_switch) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_playback_switch" snd_mixer_selem_has_playback_switch) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_playback_switch_joined" snd_mixer_selem_has_playback_switch_joined) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_capture_switch" snd_mixer_selem_has_capture_switch) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_capture_switch_joined" snd_mixer_selem_has_capture_switch_joined) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_has_capture_switch_exclusive" snd_mixer_selem_has_capture_switch_exclusive) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_ask_playback_vol_dB" snd_mixer_selem_ask_playback_vol_dB) :int
  (elem :pointer)
  (value :long)
  (dBvalue :pointer))

(cffi:defcfun ("snd_mixer_selem_ask_capture_vol_dB" snd_mixer_selem_ask_capture_vol_dB) :int
  (elem :pointer)
  (value :long)
  (dBvalue :pointer))

(cffi:defcfun ("snd_mixer_selem_ask_playback_dB_vol" snd_mixer_selem_ask_playback_dB_vol) :int
  (elem :pointer)
  (dBvalue :long)
  (dir :int)
  (value :pointer))

(cffi:defcfun ("snd_mixer_selem_ask_capture_dB_vol" snd_mixer_selem_ask_capture_dB_vol) :int
  (elem :pointer)
  (dBvalue :long)
  (dir :int)
  (value :pointer))

(cffi:defcfun ("snd_mixer_selem_get_playback_volume" snd_mixer_selem_get_playback_volume) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :pointer))

(cffi:defcfun ("snd_mixer_selem_get_capture_volume" snd_mixer_selem_get_capture_volume) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :pointer))

(cffi:defcfun ("snd_mixer_selem_get_playback_dB" snd_mixer_selem_get_playback_dB) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :pointer))

(cffi:defcfun ("snd_mixer_selem_get_capture_dB" snd_mixer_selem_get_capture_dB) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :pointer))

(cffi:defcfun ("snd_mixer_selem_get_playback_switch" snd_mixer_selem_get_playback_switch) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :pointer))

(cffi:defcfun ("snd_mixer_selem_get_capture_switch" snd_mixer_selem_get_capture_switch) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :pointer))

(cffi:defcfun ("snd_mixer_selem_set_playback_volume" snd_mixer_selem_set_playback_volume) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :long))

(cffi:defcfun ("snd_mixer_selem_set_capture_volume" snd_mixer_selem_set_capture_volume) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :long))

(cffi:defcfun ("snd_mixer_selem_set_playback_dB" snd_mixer_selem_set_playback_dB) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :long)
  (dir :int))

(cffi:defcfun ("snd_mixer_selem_set_capture_dB" snd_mixer_selem_set_capture_dB) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :long)
  (dir :int))

(cffi:defcfun ("snd_mixer_selem_set_playback_volume_all" snd_mixer_selem_set_playback_volume_all) :int
  (elem :pointer)
  (value :long))

(cffi:defcfun ("snd_mixer_selem_set_capture_volume_all" snd_mixer_selem_set_capture_volume_all) :int
  (elem :pointer)
  (value :long))

(cffi:defcfun ("snd_mixer_selem_set_playback_dB_all" snd_mixer_selem_set_playback_dB_all) :int
  (elem :pointer)
  (value :long)
  (dir :int))

(cffi:defcfun ("snd_mixer_selem_set_capture_dB_all" snd_mixer_selem_set_capture_dB_all) :int
  (elem :pointer)
  (value :long)
  (dir :int))

(cffi:defcfun ("snd_mixer_selem_set_playback_switch" snd_mixer_selem_set_playback_switch) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :int))

(cffi:defcfun ("snd_mixer_selem_set_capture_switch" snd_mixer_selem_set_capture_switch) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (value :int))

(cffi:defcfun ("snd_mixer_selem_set_playback_switch_all" snd_mixer_selem_set_playback_switch_all) :int
  (elem :pointer)
  (value :int))

(cffi:defcfun ("snd_mixer_selem_set_capture_switch_all" snd_mixer_selem_set_capture_switch_all) :int
  (elem :pointer)
  (value :int))

(cffi:defcfun ("snd_mixer_selem_get_playback_volume_range" snd_mixer_selem_get_playback_volume_range) :int
  (elem :pointer)
  (min :pointer)
  (max :pointer))

(cffi:defcfun ("snd_mixer_selem_get_playback_dB_range" snd_mixer_selem_get_playback_dB_range) :int
  (elem :pointer)
  (min :pointer)
  (max :pointer))

(cffi:defcfun ("snd_mixer_selem_set_playback_volume_range" snd_mixer_selem_set_playback_volume_range) :int
  (elem :pointer)
  (min :long)
  (max :long))

(cffi:defcfun ("snd_mixer_selem_get_capture_volume_range" snd_mixer_selem_get_capture_volume_range) :int
  (elem :pointer)
  (min :pointer)
  (max :pointer))

(cffi:defcfun ("snd_mixer_selem_get_capture_dB_range" snd_mixer_selem_get_capture_dB_range) :int
  (elem :pointer)
  (min :pointer)
  (max :pointer))

(cffi:defcfun ("snd_mixer_selem_set_capture_volume_range" snd_mixer_selem_set_capture_volume_range) :int
  (elem :pointer)
  (min :long)
  (max :long))

(cffi:defcfun ("snd_mixer_selem_is_enumerated" snd_mixer_selem_is_enumerated) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_is_enum_playback" snd_mixer_selem_is_enum_playback) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_is_enum_capture" snd_mixer_selem_is_enum_capture) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_get_enum_items" snd_mixer_selem_get_enum_items) :int
  (elem :pointer))

(cffi:defcfun ("snd_mixer_selem_get_enum_item_name" snd_mixer_selem_get_enum_item_name) :int
  (elem :pointer)
  (idx :unsigned-int)
  (maxlen :pointer)
  (str :string))

(cffi:defcfun ("snd_mixer_selem_get_enum_item" snd_mixer_selem_get_enum_item) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (idxp :pointer))

(cffi:defcfun ("snd_mixer_selem_set_enum_item" snd_mixer_selem_set_enum_item) :int
  (elem :pointer)
  (channel snd_mixer_selem_channel_id_t)
  (idx :unsigned-int))

(cffi:defcfun ("snd_mixer_selem_id_sizeof" snd_mixer_selem_id_sizeof) :pointer)

(cffi:defcfun ("snd_mixer_selem_id_malloc" snd_mixer_selem_id_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_mixer_selem_id_free" snd_mixer_selem_id_free) :void
  (obj :pointer))

(cffi:defcfun ("snd_mixer_selem_id_copy" snd_mixer_selem_id_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_mixer_selem_id_get_name" snd_mixer_selem_id_get_name) :string
  (obj :pointer))

(cffi:defcfun ("snd_mixer_selem_id_get_index" snd_mixer_selem_id_get_index) :unsigned-int
  (obj :pointer))

(cffi:defcfun ("snd_mixer_selem_id_set_name" snd_mixer_selem_id_set_name) :void
  (obj :pointer)
  (val :string))

(cffi:defcfun ("snd_mixer_selem_id_set_index" snd_mixer_selem_id_set_index) :void
  (obj :pointer)
  (val :unsigned-int))

(cl:defconstant SND_SEQ_OPEN_OUTPUT 1)

(cl:defconstant SND_SEQ_OPEN_INPUT 2)

(cl:defconstant SND_SEQ_OPEN_DUPLEX (cl:logior 1 2))

(cl:defconstant SND_SEQ_NONBLOCK #x0001)

(cffi:defcenum snd_seq_type_t
	:SND_SEQ_TYPE_HW
	:SND_SEQ_TYPE_SHM
	:SND_SEQ_TYPE_INET)

(cl:defconstant SND_SEQ_ADDRESS_UNKNOWN 253)

(cl:defconstant SND_SEQ_ADDRESS_SUBSCRIBERS 254)

(cl:defconstant SND_SEQ_ADDRESS_BROADCAST 255)

(cl:defconstant SND_SEQ_CLIENT_SYSTEM 0)

(cffi:defcfun ("snd_seq_open" snd_seq_open) :int
  (handle :pointer)
  (name :string)
  (streams :int)
  (mode :int))

(cffi:defcfun ("snd_seq_open_lconf" snd_seq_open_lconf) :int
  (handle :pointer)
  (name :string)
  (streams :int)
  (mode :int)
  (lconf :pointer))

(cffi:defcfun ("snd_seq_name" snd_seq_name) :string
  (seq :pointer))

(cffi:defcfun ("snd_seq_type" snd_seq_type) snd_seq_type_t
  (seq :pointer))

(cffi:defcfun ("snd_seq_close" snd_seq_close) :int
  (handle :pointer))

(cffi:defcfun ("snd_seq_poll_descriptors_count" snd_seq_poll_descriptors_count) :int
  (handle :pointer)
  (events :short))

(cffi:defcfun ("snd_seq_poll_descriptors" snd_seq_poll_descriptors) :int
  (handle :pointer)
  (pfds :pointer)
  (space :unsigned-int)
  (events :short))

(cffi:defcfun ("snd_seq_poll_descriptors_revents" snd_seq_poll_descriptors_revents) :int
  (seq :pointer)
  (pfds :pointer)
  (nfds :unsigned-int)
  (revents :pointer))

(cffi:defcfun ("snd_seq_nonblock" snd_seq_nonblock) :int
  (handle :pointer)
  (nonblock :int))

(cffi:defcfun ("snd_seq_client_id" snd_seq_client_id) :int
  (handle :pointer))

(cffi:defcfun ("snd_seq_get_output_buffer_size" snd_seq_get_output_buffer_size) :pointer
  (handle :pointer))

(cffi:defcfun ("snd_seq_get_input_buffer_size" snd_seq_get_input_buffer_size) :pointer
  (handle :pointer))

(cffi:defcfun ("snd_seq_set_output_buffer_size" snd_seq_set_output_buffer_size) :int
  (handle :pointer)
  (size :pointer))

(cffi:defcfun ("snd_seq_set_input_buffer_size" snd_seq_set_input_buffer_size) :int
  (handle :pointer)
  (size :pointer))

(cffi:defcfun ("snd_seq_system_info_sizeof" snd_seq_system_info_sizeof) :pointer)

(cffi:defcfun ("snd_seq_system_info_malloc" snd_seq_system_info_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_system_info_free" snd_seq_system_info_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_system_info_copy" snd_seq_system_info_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_system_info_get_queues" snd_seq_system_info_get_queues) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_system_info_get_clients" snd_seq_system_info_get_clients) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_system_info_get_ports" snd_seq_system_info_get_ports) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_system_info_get_channels" snd_seq_system_info_get_channels) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_system_info_get_cur_clients" snd_seq_system_info_get_cur_clients) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_system_info_get_cur_queues" snd_seq_system_info_get_cur_queues) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_system_info" snd_seq_system_info) :int
  (handle :pointer)
  (info :pointer))

(cffi:defcenum snd_seq_client_type_t
	(:SND_SEQ_USER_CLIENT #.1)
	(:SND_SEQ_KERNEL_CLIENT #.2))

(cffi:defcfun ("snd_seq_client_info_sizeof" snd_seq_client_info_sizeof) :pointer)

(cffi:defcfun ("snd_seq_client_info_malloc" snd_seq_client_info_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_client_info_free" snd_seq_client_info_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_client_info_copy" snd_seq_client_info_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_client_info_get_client" snd_seq_client_info_get_client) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_get_type" snd_seq_client_info_get_type) snd_seq_client_type_t
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_get_name" snd_seq_client_info_get_name) :string
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_get_broadcast_filter" snd_seq_client_info_get_broadcast_filter) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_get_error_bounce" snd_seq_client_info_get_error_bounce) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_get_event_filter" snd_seq_client_info_get_event_filter) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_get_num_ports" snd_seq_client_info_get_num_ports) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_get_event_lost" snd_seq_client_info_get_event_lost) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_set_client" snd_seq_client_info_set_client) :void
  (info :pointer)
  (client :int))

(cffi:defcfun ("snd_seq_client_info_set_name" snd_seq_client_info_set_name) :void
  (info :pointer)
  (name :string))

(cffi:defcfun ("snd_seq_client_info_set_broadcast_filter" snd_seq_client_info_set_broadcast_filter) :void
  (info :pointer)
  (val :int))

(cffi:defcfun ("snd_seq_client_info_set_error_bounce" snd_seq_client_info_set_error_bounce) :void
  (info :pointer)
  (val :int))

(cffi:defcfun ("snd_seq_client_info_set_event_filter" snd_seq_client_info_set_event_filter) :void
  (info :pointer)
  (filter :pointer))

(cffi:defcfun ("snd_seq_client_info_event_filter_clear" snd_seq_client_info_event_filter_clear) :void
  (info :pointer))

(cffi:defcfun ("snd_seq_client_info_event_filter_add" snd_seq_client_info_event_filter_add) :void
  (info :pointer)
  (event_type :int))

(cffi:defcfun ("snd_seq_client_info_event_filter_del" snd_seq_client_info_event_filter_del) :void
  (info :pointer)
  (event_type :int))

(cffi:defcfun ("snd_seq_client_info_event_filter_check" snd_seq_client_info_event_filter_check) :int
  (info :pointer)
  (event_type :int))

(cffi:defcfun ("snd_seq_get_client_info" snd_seq_get_client_info) :int
  (handle :pointer)
  (info :pointer))

(cffi:defcfun ("snd_seq_get_any_client_info" snd_seq_get_any_client_info) :int
  (handle :pointer)
  (client :int)
  (info :pointer))

(cffi:defcfun ("snd_seq_set_client_info" snd_seq_set_client_info) :int
  (handle :pointer)
  (info :pointer))

(cffi:defcfun ("snd_seq_query_next_client" snd_seq_query_next_client) :int
  (handle :pointer)
  (info :pointer))

(cffi:defcfun ("snd_seq_client_pool_sizeof" snd_seq_client_pool_sizeof) :pointer)

(cffi:defcfun ("snd_seq_client_pool_malloc" snd_seq_client_pool_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_client_pool_free" snd_seq_client_pool_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_client_pool_copy" snd_seq_client_pool_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_client_pool_get_client" snd_seq_client_pool_get_client) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_client_pool_get_output_pool" snd_seq_client_pool_get_output_pool) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_client_pool_get_input_pool" snd_seq_client_pool_get_input_pool) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_client_pool_get_output_room" snd_seq_client_pool_get_output_room) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_client_pool_get_output_free" snd_seq_client_pool_get_output_free) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_client_pool_get_input_free" snd_seq_client_pool_get_input_free) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_client_pool_set_output_pool" snd_seq_client_pool_set_output_pool) :void
  (info :pointer)
  (size :pointer))

(cffi:defcfun ("snd_seq_client_pool_set_input_pool" snd_seq_client_pool_set_input_pool) :void
  (info :pointer)
  (size :pointer))

(cffi:defcfun ("snd_seq_client_pool_set_output_room" snd_seq_client_pool_set_output_room) :void
  (info :pointer)
  (size :pointer))

(cffi:defcfun ("snd_seq_get_client_pool" snd_seq_get_client_pool) :int
  (handle :pointer)
  (info :pointer))

(cffi:defcfun ("snd_seq_set_client_pool" snd_seq_set_client_pool) :int
  (handle :pointer)
  (info :pointer))

(cl:defconstant SND_SEQ_PORT_SYSTEM_TIMER 0)

(cl:defconstant SND_SEQ_PORT_SYSTEM_ANNOUNCE 1)

(cl:defconstant SND_SEQ_PORT_CAP_READ (cl:ash 1 0))

(cl:defconstant SND_SEQ_PORT_CAP_WRITE (cl:ash 1 1))

(cl:defconstant SND_SEQ_PORT_CAP_SYNC_READ (cl:ash 1 2))

(cl:defconstant SND_SEQ_PORT_CAP_SYNC_WRITE (cl:ash 1 3))

(cl:defconstant SND_SEQ_PORT_CAP_DUPLEX (cl:ash 1 4))

(cl:defconstant SND_SEQ_PORT_CAP_SUBS_READ (cl:ash 1 5))

(cl:defconstant SND_SEQ_PORT_CAP_SUBS_WRITE (cl:ash 1 6))

(cl:defconstant SND_SEQ_PORT_CAP_NO_EXPORT (cl:ash 1 7))

(cl:defconstant SND_SEQ_PORT_TYPE_SPECIFIC (cl:ash 1 0))

(cl:defconstant SND_SEQ_PORT_TYPE_MIDI_GENERIC (cl:ash 1 1))

(cl:defconstant SND_SEQ_PORT_TYPE_MIDI_GM (cl:ash 1 2))

(cl:defconstant SND_SEQ_PORT_TYPE_MIDI_GS (cl:ash 1 3))

(cl:defconstant SND_SEQ_PORT_TYPE_MIDI_XG (cl:ash 1 4))

(cl:defconstant SND_SEQ_PORT_TYPE_MIDI_MT32 (cl:ash 1 5))

(cl:defconstant SND_SEQ_PORT_TYPE_MIDI_GM2 (cl:ash 1 6))

(cl:defconstant SND_SEQ_PORT_TYPE_SYNTH (cl:ash 1 10))

(cl:defconstant SND_SEQ_PORT_TYPE_DIRECT_SAMPLE (cl:ash 1 11))

(cl:defconstant SND_SEQ_PORT_TYPE_SAMPLE (cl:ash 1 12))

(cl:defconstant SND_SEQ_PORT_TYPE_HARDWARE (cl:ash 1 16))

(cl:defconstant SND_SEQ_PORT_TYPE_SOFTWARE (cl:ash 1 17))

(cl:defconstant SND_SEQ_PORT_TYPE_SYNTHESIZER (cl:ash 1 18))

(cl:defconstant SND_SEQ_PORT_TYPE_PORT (cl:ash 1 19))

(cl:defconstant SND_SEQ_PORT_TYPE_APPLICATION (cl:ash 1 20))

(cffi:defcfun ("snd_seq_port_info_sizeof" snd_seq_port_info_sizeof) :pointer)

(cffi:defcfun ("snd_seq_port_info_malloc" snd_seq_port_info_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_port_info_free" snd_seq_port_info_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_port_info_copy" snd_seq_port_info_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_port_info_get_client" snd_seq_port_info_get_client) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_port" snd_seq_port_info_get_port) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_addr" snd_seq_port_info_get_addr) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_name" snd_seq_port_info_get_name) :string
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_capability" snd_seq_port_info_get_capability) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_type" snd_seq_port_info_get_type) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_midi_channels" snd_seq_port_info_get_midi_channels) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_midi_voices" snd_seq_port_info_get_midi_voices) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_synth_voices" snd_seq_port_info_get_synth_voices) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_read_use" snd_seq_port_info_get_read_use) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_write_use" snd_seq_port_info_get_write_use) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_port_specified" snd_seq_port_info_get_port_specified) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_timestamping" snd_seq_port_info_get_timestamping) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_timestamp_real" snd_seq_port_info_get_timestamp_real) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_get_timestamp_queue" snd_seq_port_info_get_timestamp_queue) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_info_set_client" snd_seq_port_info_set_client) :void
  (info :pointer)
  (client :int))

(cffi:defcfun ("snd_seq_port_info_set_port" snd_seq_port_info_set_port) :void
  (info :pointer)
  (port :int))

(cffi:defcfun ("snd_seq_port_info_set_addr" snd_seq_port_info_set_addr) :void
  (info :pointer)
  (addr :pointer))

(cffi:defcfun ("snd_seq_port_info_set_name" snd_seq_port_info_set_name) :void
  (info :pointer)
  (name :string))

(cffi:defcfun ("snd_seq_port_info_set_capability" snd_seq_port_info_set_capability) :void
  (info :pointer)
  (capability :unsigned-int))

(cffi:defcfun ("snd_seq_port_info_set_type" snd_seq_port_info_set_type) :void
  (info :pointer)
  (type :unsigned-int))

(cffi:defcfun ("snd_seq_port_info_set_midi_channels" snd_seq_port_info_set_midi_channels) :void
  (info :pointer)
  (channels :int))

(cffi:defcfun ("snd_seq_port_info_set_midi_voices" snd_seq_port_info_set_midi_voices) :void
  (info :pointer)
  (voices :int))

(cffi:defcfun ("snd_seq_port_info_set_synth_voices" snd_seq_port_info_set_synth_voices) :void
  (info :pointer)
  (voices :int))

(cffi:defcfun ("snd_seq_port_info_set_port_specified" snd_seq_port_info_set_port_specified) :void
  (info :pointer)
  (val :int))

(cffi:defcfun ("snd_seq_port_info_set_timestamping" snd_seq_port_info_set_timestamping) :void
  (info :pointer)
  (enable :int))

(cffi:defcfun ("snd_seq_port_info_set_timestamp_real" snd_seq_port_info_set_timestamp_real) :void
  (info :pointer)
  (realtime :int))

(cffi:defcfun ("snd_seq_port_info_set_timestamp_queue" snd_seq_port_info_set_timestamp_queue) :void
  (info :pointer)
  (queue :int))

(cffi:defcfun ("snd_seq_create_port" snd_seq_create_port) :int
  (handle :pointer)
  (info :pointer))

(cffi:defcfun ("snd_seq_delete_port" snd_seq_delete_port) :int
  (handle :pointer)
  (port :int))

(cffi:defcfun ("snd_seq_get_port_info" snd_seq_get_port_info) :int
  (handle :pointer)
  (port :int)
  (info :pointer))

(cffi:defcfun ("snd_seq_get_any_port_info" snd_seq_get_any_port_info) :int
  (handle :pointer)
  (client :int)
  (port :int)
  (info :pointer))

(cffi:defcfun ("snd_seq_set_port_info" snd_seq_set_port_info) :int
  (handle :pointer)
  (port :int)
  (info :pointer))

(cffi:defcfun ("snd_seq_query_next_port" snd_seq_query_next_port) :int
  (handle :pointer)
  (info :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_sizeof" snd_seq_port_subscribe_sizeof) :pointer)

(cffi:defcfun ("snd_seq_port_subscribe_malloc" snd_seq_port_subscribe_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_free" snd_seq_port_subscribe_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_copy" snd_seq_port_subscribe_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_get_sender" snd_seq_port_subscribe_get_sender) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_get_dest" snd_seq_port_subscribe_get_dest) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_get_queue" snd_seq_port_subscribe_get_queue) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_get_exclusive" snd_seq_port_subscribe_get_exclusive) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_get_time_update" snd_seq_port_subscribe_get_time_update) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_get_time_real" snd_seq_port_subscribe_get_time_real) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_set_sender" snd_seq_port_subscribe_set_sender) :void
  (info :pointer)
  (addr :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_set_dest" snd_seq_port_subscribe_set_dest) :void
  (info :pointer)
  (addr :pointer))

(cffi:defcfun ("snd_seq_port_subscribe_set_queue" snd_seq_port_subscribe_set_queue) :void
  (info :pointer)
  (q :int))

(cffi:defcfun ("snd_seq_port_subscribe_set_exclusive" snd_seq_port_subscribe_set_exclusive) :void
  (info :pointer)
  (val :int))

(cffi:defcfun ("snd_seq_port_subscribe_set_time_update" snd_seq_port_subscribe_set_time_update) :void
  (info :pointer)
  (val :int))

(cffi:defcfun ("snd_seq_port_subscribe_set_time_real" snd_seq_port_subscribe_set_time_real) :void
  (info :pointer)
  (val :int))

(cffi:defcfun ("snd_seq_get_port_subscription" snd_seq_get_port_subscription) :int
  (handle :pointer)
  (sub :pointer))

(cffi:defcfun ("snd_seq_subscribe_port" snd_seq_subscribe_port) :int
  (handle :pointer)
  (sub :pointer))

(cffi:defcfun ("snd_seq_unsubscribe_port" snd_seq_unsubscribe_port) :int
  (handle :pointer)
  (sub :pointer))

(cffi:defcenum snd_seq_query_subs_type_t
	:SND_SEQ_QUERY_SUBS_READ
	:SND_SEQ_QUERY_SUBS_WRITE)

(cffi:defcfun ("snd_seq_query_subscribe_sizeof" snd_seq_query_subscribe_sizeof) :pointer)

(cffi:defcfun ("snd_seq_query_subscribe_malloc" snd_seq_query_subscribe_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_free" snd_seq_query_subscribe_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_copy" snd_seq_query_subscribe_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_client" snd_seq_query_subscribe_get_client) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_port" snd_seq_query_subscribe_get_port) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_root" snd_seq_query_subscribe_get_root) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_type" snd_seq_query_subscribe_get_type) snd_seq_query_subs_type_t
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_index" snd_seq_query_subscribe_get_index) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_num_subs" snd_seq_query_subscribe_get_num_subs) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_addr" snd_seq_query_subscribe_get_addr) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_queue" snd_seq_query_subscribe_get_queue) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_exclusive" snd_seq_query_subscribe_get_exclusive) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_time_update" snd_seq_query_subscribe_get_time_update) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_get_time_real" snd_seq_query_subscribe_get_time_real) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_set_client" snd_seq_query_subscribe_set_client) :void
  (info :pointer)
  (client :int))

(cffi:defcfun ("snd_seq_query_subscribe_set_port" snd_seq_query_subscribe_set_port) :void
  (info :pointer)
  (port :int))

(cffi:defcfun ("snd_seq_query_subscribe_set_root" snd_seq_query_subscribe_set_root) :void
  (info :pointer)
  (addr :pointer))

(cffi:defcfun ("snd_seq_query_subscribe_set_type" snd_seq_query_subscribe_set_type) :void
  (info :pointer)
  (type snd_seq_query_subs_type_t))

(cffi:defcfun ("snd_seq_query_subscribe_set_index" snd_seq_query_subscribe_set_index) :void
  (info :pointer)
  (_index :int))

(cffi:defcfun ("snd_seq_query_port_subscribers" snd_seq_query_port_subscribers) :int
  (seq :pointer)
  (subs :pointer))

(cl:defconstant SND_SEQ_QUEUE_DIRECT 253)

(cffi:defcfun ("snd_seq_queue_info_sizeof" snd_seq_queue_info_sizeof) :pointer)

(cffi:defcfun ("snd_seq_queue_info_malloc" snd_seq_queue_info_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_queue_info_free" snd_seq_queue_info_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_queue_info_copy" snd_seq_queue_info_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_queue_info_get_queue" snd_seq_queue_info_get_queue) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_info_get_name" snd_seq_queue_info_get_name) :string
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_info_get_owner" snd_seq_queue_info_get_owner) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_info_get_locked" snd_seq_queue_info_get_locked) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_info_get_flags" snd_seq_queue_info_get_flags) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_info_set_name" snd_seq_queue_info_set_name) :void
  (info :pointer)
  (name :string))

(cffi:defcfun ("snd_seq_queue_info_set_owner" snd_seq_queue_info_set_owner) :void
  (info :pointer)
  (owner :int))

(cffi:defcfun ("snd_seq_queue_info_set_locked" snd_seq_queue_info_set_locked) :void
  (info :pointer)
  (locked :int))

(cffi:defcfun ("snd_seq_queue_info_set_flags" snd_seq_queue_info_set_flags) :void
  (info :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("snd_seq_create_queue" snd_seq_create_queue) :int
  (seq :pointer)
  (info :pointer))

(cffi:defcfun ("snd_seq_alloc_named_queue" snd_seq_alloc_named_queue) :int
  (seq :pointer)
  (name :string))

(cffi:defcfun ("snd_seq_alloc_queue" snd_seq_alloc_queue) :int
  (handle :pointer))

(cffi:defcfun ("snd_seq_free_queue" snd_seq_free_queue) :int
  (handle :pointer)
  (q :int))

(cffi:defcfun ("snd_seq_get_queue_info" snd_seq_get_queue_info) :int
  (seq :pointer)
  (q :int)
  (info :pointer))

(cffi:defcfun ("snd_seq_set_queue_info" snd_seq_set_queue_info) :int
  (seq :pointer)
  (q :int)
  (info :pointer))

(cffi:defcfun ("snd_seq_query_named_queue" snd_seq_query_named_queue) :int
  (seq :pointer)
  (name :string))

(cffi:defcfun ("snd_seq_get_queue_usage" snd_seq_get_queue_usage) :int
  (handle :pointer)
  (q :int))

(cffi:defcfun ("snd_seq_set_queue_usage" snd_seq_set_queue_usage) :int
  (handle :pointer)
  (q :int)
  (used :int))

(cffi:defcfun ("snd_seq_queue_status_sizeof" snd_seq_queue_status_sizeof) :pointer)

(cffi:defcfun ("snd_seq_queue_status_malloc" snd_seq_queue_status_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_queue_status_free" snd_seq_queue_status_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_queue_status_copy" snd_seq_queue_status_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_queue_status_get_queue" snd_seq_queue_status_get_queue) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_status_get_events" snd_seq_queue_status_get_events) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_status_get_tick_time" snd_seq_queue_status_get_tick_time) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_status_get_real_time" snd_seq_queue_status_get_real_time) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_status_get_status" snd_seq_queue_status_get_status) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_get_queue_status" snd_seq_get_queue_status) :int
  (handle :pointer)
  (q :int)
  (status :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_sizeof" snd_seq_queue_tempo_sizeof) :pointer)

(cffi:defcfun ("snd_seq_queue_tempo_malloc" snd_seq_queue_tempo_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_free" snd_seq_queue_tempo_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_copy" snd_seq_queue_tempo_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_get_queue" snd_seq_queue_tempo_get_queue) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_get_tempo" snd_seq_queue_tempo_get_tempo) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_get_ppq" snd_seq_queue_tempo_get_ppq) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_get_skew" snd_seq_queue_tempo_get_skew) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_get_skew_base" snd_seq_queue_tempo_get_skew_base) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_tempo_set_tempo" snd_seq_queue_tempo_set_tempo) :void
  (info :pointer)
  (tempo :unsigned-int))

(cffi:defcfun ("snd_seq_queue_tempo_set_ppq" snd_seq_queue_tempo_set_ppq) :void
  (info :pointer)
  (ppq :int))

(cffi:defcfun ("snd_seq_queue_tempo_set_skew" snd_seq_queue_tempo_set_skew) :void
  (info :pointer)
  (skew :unsigned-int))

(cffi:defcfun ("snd_seq_queue_tempo_set_skew_base" snd_seq_queue_tempo_set_skew_base) :void
  (info :pointer)
  (base :unsigned-int))

(cffi:defcfun ("snd_seq_get_queue_tempo" snd_seq_get_queue_tempo) :int
  (handle :pointer)
  (q :int)
  (tempo :pointer))

(cffi:defcfun ("snd_seq_set_queue_tempo" snd_seq_set_queue_tempo) :int
  (handle :pointer)
  (q :int)
  (tempo :pointer))

(cffi:defcenum snd_seq_queue_timer_type_t
	(:SND_SEQ_TIMER_ALSA #.0)
	(:SND_SEQ_TIMER_MIDI_CLOCK #.1)
	(:SND_SEQ_TIMER_MIDI_TICK #.2))

(cffi:defcfun ("snd_seq_queue_timer_sizeof" snd_seq_queue_timer_sizeof) :pointer)

(cffi:defcfun ("snd_seq_queue_timer_malloc" snd_seq_queue_timer_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_queue_timer_free" snd_seq_queue_timer_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_queue_timer_copy" snd_seq_queue_timer_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_queue_timer_get_queue" snd_seq_queue_timer_get_queue) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_timer_get_type" snd_seq_queue_timer_get_type) snd_seq_queue_timer_type_t
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_timer_get_id" snd_seq_queue_timer_get_id) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_timer_get_resolution" snd_seq_queue_timer_get_resolution) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_queue_timer_set_type" snd_seq_queue_timer_set_type) :void
  (info :pointer)
  (type snd_seq_queue_timer_type_t))

(cffi:defcfun ("snd_seq_queue_timer_set_id" snd_seq_queue_timer_set_id) :void
  (info :pointer)
  (id :pointer))

(cffi:defcfun ("snd_seq_queue_timer_set_resolution" snd_seq_queue_timer_set_resolution) :void
  (info :pointer)
  (resolution :unsigned-int))

(cffi:defcfun ("snd_seq_get_queue_timer" snd_seq_get_queue_timer) :int
  (handle :pointer)
  (q :int)
  (timer :pointer))

(cffi:defcfun ("snd_seq_set_queue_timer" snd_seq_set_queue_timer) :int
  (handle :pointer)
  (q :int)
  (timer :pointer))

(cffi:defcfun ("snd_seq_free_event" snd_seq_free_event) :int
  (ev :pointer))

(cffi:defcfun ("snd_seq_event_length" snd_seq_event_length) :pointer
  (ev :pointer))

(cffi:defcfun ("snd_seq_event_output" snd_seq_event_output) :int
  (handle :pointer)
  (ev :pointer))

(cffi:defcfun ("snd_seq_event_output_buffer" snd_seq_event_output_buffer) :int
  (handle :pointer)
  (ev :pointer))

(cffi:defcfun ("snd_seq_event_output_direct" snd_seq_event_output_direct) :int
  (handle :pointer)
  (ev :pointer))

(cffi:defcfun ("snd_seq_event_input" snd_seq_event_input) :int
  (handle :pointer)
  (ev :pointer))

(cffi:defcfun ("snd_seq_event_input_pending" snd_seq_event_input_pending) :int
  (seq :pointer)
  (fetch_sequencer :int))

(cffi:defcfun ("snd_seq_drain_output" snd_seq_drain_output) :int
  (handle :pointer))

(cffi:defcfun ("snd_seq_event_output_pending" snd_seq_event_output_pending) :int
  (seq :pointer))

(cffi:defcfun ("snd_seq_extract_output" snd_seq_extract_output) :int
  (handle :pointer)
  (ev :pointer))

(cffi:defcfun ("snd_seq_drop_output" snd_seq_drop_output) :int
  (handle :pointer))

(cffi:defcfun ("snd_seq_drop_output_buffer" snd_seq_drop_output_buffer) :int
  (handle :pointer))

(cffi:defcfun ("snd_seq_drop_input" snd_seq_drop_input) :int
  (handle :pointer))

(cffi:defcfun ("snd_seq_drop_input_buffer" snd_seq_drop_input_buffer) :int
  (handle :pointer))

(cl:defconstant SND_SEQ_REMOVE_INPUT (cl:ash 1 0))

(cl:defconstant SND_SEQ_REMOVE_OUTPUT (cl:ash 1 1))

(cl:defconstant SND_SEQ_REMOVE_DEST (cl:ash 1 2))

(cl:defconstant SND_SEQ_REMOVE_DEST_CHANNEL (cl:ash 1 3))

(cl:defconstant SND_SEQ_REMOVE_TIME_BEFORE (cl:ash 1 4))

(cl:defconstant SND_SEQ_REMOVE_TIME_AFTER (cl:ash 1 5))

(cl:defconstant SND_SEQ_REMOVE_TIME_TICK (cl:ash 1 6))

(cl:defconstant SND_SEQ_REMOVE_EVENT_TYPE (cl:ash 1 7))

(cl:defconstant SND_SEQ_REMOVE_IGNORE_OFF (cl:ash 1 8))

(cl:defconstant SND_SEQ_REMOVE_TAG_MATCH (cl:ash 1 9))

(cffi:defcfun ("snd_seq_remove_events_sizeof" snd_seq_remove_events_sizeof) :pointer)

(cffi:defcfun ("snd_seq_remove_events_malloc" snd_seq_remove_events_malloc) :int
  (ptr :pointer))

(cffi:defcfun ("snd_seq_remove_events_free" snd_seq_remove_events_free) :void
  (ptr :pointer))

(cffi:defcfun ("snd_seq_remove_events_copy" snd_seq_remove_events_copy) :void
  (dst :pointer)
  (src :pointer))

(cffi:defcfun ("snd_seq_remove_events_get_condition" snd_seq_remove_events_get_condition) :unsigned-int
  (info :pointer))

(cffi:defcfun ("snd_seq_remove_events_get_queue" snd_seq_remove_events_get_queue) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_remove_events_get_time" snd_seq_remove_events_get_time) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_remove_events_get_dest" snd_seq_remove_events_get_dest) :pointer
  (info :pointer))

(cffi:defcfun ("snd_seq_remove_events_get_channel" snd_seq_remove_events_get_channel) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_remove_events_get_event_type" snd_seq_remove_events_get_event_type) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_remove_events_get_tag" snd_seq_remove_events_get_tag) :int
  (info :pointer))

(cffi:defcfun ("snd_seq_remove_events_set_condition" snd_seq_remove_events_set_condition) :void
  (info :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("snd_seq_remove_events_set_queue" snd_seq_remove_events_set_queue) :void
  (info :pointer)
  (queue :int))

(cffi:defcfun ("snd_seq_remove_events_set_time" snd_seq_remove_events_set_time) :void
  (info :pointer)
  (time :pointer))

(cffi:defcfun ("snd_seq_remove_events_set_dest" snd_seq_remove_events_set_dest) :void
  (info :pointer)
  (addr :pointer))

(cffi:defcfun ("snd_seq_remove_events_set_channel" snd_seq_remove_events_set_channel) :void
  (info :pointer)
  (channel :int))

(cffi:defcfun ("snd_seq_remove_events_set_event_type" snd_seq_remove_events_set_event_type) :void
  (info :pointer)
  (type :int))

(cffi:defcfun ("snd_seq_remove_events_set_tag" snd_seq_remove_events_set_tag) :void
  (info :pointer)
  (tag :int))

(cffi:defcfun ("snd_seq_remove_events" snd_seq_remove_events) :int
  (handle :pointer)
  (info :pointer))

(cffi:defcfun ("snd_seq_set_bit" snd_seq_set_bit) :void
  (nr :int)
  (array :pointer))

(cffi:defcfun ("snd_seq_unset_bit" snd_seq_unset_bit) :void
  (nr :int)
  (array :pointer))

(cffi:defcfun ("snd_seq_change_bit" snd_seq_change_bit) :int
  (nr :int)
  (array :pointer))

(cffi:defcfun ("snd_seq_get_bit" snd_seq_get_bit) :int
  (nr :int)
  (array :pointer))

;; (defanonenum 
;; 	SND_SEQ_EVFLG_RESULT
;; 	SND_SEQ_EVFLG_NOTE
;; 	SND_SEQ_EVFLG_CONTROL
;; 	SND_SEQ_EVFLG_QUEUE
;; 	SND_SEQ_EVFLG_SYSTEM
;; 	SND_SEQ_EVFLG_MESSAGE
;; 	SND_SEQ_EVFLG_CONNECTION
;; 	SND_SEQ_EVFLG_SAMPLE
;; 	SND_SEQ_EVFLG_USERS
;; 	SND_SEQ_EVFLG_INSTR
;; 	SND_SEQ_EVFLG_QUOTE
;; 	SND_SEQ_EVFLG_NONE
;; 	SND_SEQ_EVFLG_RAW
;; 	SND_SEQ_EVFLG_FIXED
;; 	SND_SEQ_EVFLG_VARIABLE
;; 	SND_SEQ_EVFLG_VARUSR)

;; (defanonenum 
;; 	SND_SEQ_EVFLG_NOTE_ONEARG
;; 	SND_SEQ_EVFLG_NOTE_TWOARG)

;; (defanonenum 
;; 	SND_SEQ_EVFLG_QUEUE_NOARG
;; 	SND_SEQ_EVFLG_QUEUE_TICK
;; 	SND_SEQ_EVFLG_QUEUE_TIME
;; 	SND_SEQ_EVFLG_QUEUE_VALUE)

(cffi:defcvar ("snd_seq_event_types" snd_seq_event_types)
 :pointer)

(cffi:defcfun ("snd_seq_control_queue" snd_seq_control_queue) :int
  (seq :pointer)
  (q :int)
  (type :int)
  (value :int)
  (ev :pointer))

(cffi:defcfun ("snd_seq_create_simple_port" snd_seq_create_simple_port) :int
  (seq :pointer)
  (name :string)
  (caps :unsigned-int)
  (type :unsigned-int))

(cffi:defcfun ("snd_seq_delete_simple_port" snd_seq_delete_simple_port) :int
  (seq :pointer)
  (port :int))

(cffi:defcfun ("snd_seq_connect_from" snd_seq_connect_from) :int
  (seq :pointer)
  (my_port :int)
  (src_client :int)
  (src_port :int))

(cffi:defcfun ("snd_seq_connect_to" snd_seq_connect_to) :int
  (seq :pointer)
  (my_port :int)
  (dest_client :int)
  (dest_port :int))

(cffi:defcfun ("snd_seq_disconnect_from" snd_seq_disconnect_from) :int
  (seq :pointer)
  (my_port :int)
  (src_client :int)
  (src_port :int))

(cffi:defcfun ("snd_seq_disconnect_to" snd_seq_disconnect_to) :int
  (seq :pointer)
  (my_port :int)
  (dest_client :int)
  (dest_port :int))

(cffi:defcfun ("snd_seq_set_client_name" snd_seq_set_client_name) :int
  (seq :pointer)
  (name :string))

(cffi:defcfun ("snd_seq_set_client_event_filter" snd_seq_set_client_event_filter) :int
  (seq :pointer)
  (event_type :int))

(cffi:defcfun ("snd_seq_set_client_pool_output" snd_seq_set_client_pool_output) :int
  (seq :pointer)
  (size :pointer))

(cffi:defcfun ("snd_seq_set_client_pool_output_room" snd_seq_set_client_pool_output_room) :int
  (seq :pointer)
  (size :pointer))

(cffi:defcfun ("snd_seq_set_client_pool_input" snd_seq_set_client_pool_input) :int
  (seq :pointer)
  (size :pointer))

(cffi:defcfun ("snd_seq_sync_output_queue" snd_seq_sync_output_queue) :int
  (seq :pointer))

(cffi:defcfun ("snd_seq_parse_address" snd_seq_parse_address) :int
  (seq :pointer)
  (addr :pointer)
  (str :string))

(cffi:defcfun ("snd_seq_reset_pool_output" snd_seq_reset_pool_output) :int
  (seq :pointer))

(cffi:defcfun ("snd_seq_reset_pool_input" snd_seq_reset_pool_input) :int
  (seq :pointer))

(cffi:defcfun ("snd_midi_event_new" snd_midi_event_new) :int
  (bufsize :pointer)
  (rdev :pointer))

(cffi:defcfun ("snd_midi_event_resize_buffer" snd_midi_event_resize_buffer) :int
  (dev :pointer)
  (bufsize :pointer))

(cffi:defcfun ("snd_midi_event_free" snd_midi_event_free) :void
  (dev :pointer))

(cffi:defcfun ("snd_midi_event_init" snd_midi_event_init) :void
  (dev :pointer))

(cffi:defcfun ("snd_midi_event_reset_encode" snd_midi_event_reset_encode) :void
  (dev :pointer))

(cffi:defcfun ("snd_midi_event_reset_decode" snd_midi_event_reset_decode) :void
  (dev :pointer))

(cffi:defcfun ("snd_midi_event_no_status" snd_midi_event_no_status) :void
  (dev :pointer)
  (on :int))

(cffi:defcfun ("snd_midi_event_encode" snd_midi_event_encode) :long
  (dev :pointer)
  (buf :pointer)
  (count :long)
  (ev :pointer))

(cffi:defcfun ("snd_midi_event_encode_byte" snd_midi_event_encode_byte) :int
  (dev :pointer)
  (c :int)
  (ev :pointer))

(cffi:defcfun ("snd_midi_event_decode" snd_midi_event_decode) :long
  (dev :pointer)
  (buf :pointer)
  (count :long)
  (ev :pointer))

(cl:defconstant ENABLE_NLS 1)

(cl:defconstant HAVE_DCGETTEXT 1)

(cl:defconstant HAVE_GETTEXT 1)

(cl:defconstant HAVE_LIBASOUND 1)

;; (cl:defconstant PACKAGE "alsa-utils")

;; (cl:defconstant PACKAGE_BUGREPORT "")

;; (cl:defconstant PACKAGE_NAME "")

;; (cl:defconstant PACKAGE_STRING "")

;; (cl:defconstant PACKAGE_TARNAME "")

;; (cl:defconstant PACKAGE_URL "")

;; (cl:defconstant PACKAGE_VERSION "")

;; (cl:defconstant STDC_HEADERS 1)

;; (cl:defconstant TIME_WITH_SYS_TIME 1)

;; (cl:defconstant VERSION "1.0.9")

;; (cl:defconstant SND_UTIL_MAJOR 1)

;; (cl:defconstant SND_UTIL_MINOR 0)

;; (cl:defconstant SND_UTIL_SUBMINOR 9)

;; (cl:defconstant SND_UTIL_VERSION (cl:logior (cl:ash 1 16) (cl:ash 0 8) 9))

;; (cl:defconstant SND_UTIL_VERSION_STR "1.0.9")


